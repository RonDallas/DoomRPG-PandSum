class DRLAX_BaseInventory : CustomInventory
{
	Default
	{
		-COUNTITEM;
		+INVENTORY.INVBAR;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+THRUSPECIES;
		Inventory.Icon "BMODI0";
		inventory.maxamount 1;
		Inventory.Pickupsound "";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up a DRLA item.";
		//species "Player";
		DeathSound "weapons/gundrop";
	}

	bool hasdropped;

	states
	{
		Spawn:
        TNT1 A 0 NoDelay ACS_NamedExecuteAlways("ItemInit", 0);
		BMOD A 3 Bright;
		loop;
		Pickup:
        TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckCapacity") == 0, 2);
		TNT1 A 0 A_GiveInventory("DRLAX_DummyItemGet", 1); //A_Print("fdsgfd");
		TNT1 A 0 
		{
			String prefix = "a";
			String itag = invoker.GetTag();

			if(itag.CharAt(0) == "A")
			{
				prefix = "an";
			}
			A_Print("\c-Picked up " .. prefix .. " \cf" .. itag .. "\c-.", 3, "CONFONT");
		}
		stop;
		Use:
		TNT1 A 0
		{
			if(invoker.owner && invoker.owner.player && invoker.owner.player.readyweapon)
			{
				if(!invoker.hasused)
				{
					invoker.ChangedItem();
					invoker.UseMessage();
					invoker.UseSound();
					TakeInventory("RLWeaponDrop", 999);
					TakeInventory("RLScavengerDrop", 999);
					invoker.hasused = true;
					invoker.curweapon = invoker.owner.player.readyweapon.GetClass();
					invoker.curinv = invoker.GetClass();
					return;
				}

				if(invoker.hasused && invoker.curweapon == invoker.owner.player.readyweapon.GetClass() && invoker.curinv == invoker.GetClass())
				{
					invoker.hasused = false;
					invoker.curweapon = null;
					invoker.ChangedItem();
					invoker.UseFunction();
				}
			}
		}
		fail;
	}

	Class<Weapon> curweapon;
	Class<DRLAX_BaseInventory> curinv;
	bool hasused;

	virtual void PressedDrop()
	{
		DefaultDrop();
	}

	Actor DefaultDrop()
	{
		bool spawned;
		Actor act;
		[spawned, act] = owner.A_SpawnItemEx(GetClass(),0,0,32,9);
		if(act && spawned)
		{
			//act.ObtainInventory(self);
			return act;
		}
		return null;
	}

	virtual void UseMessage()
	{
		owner.A_Print("You used the item.\n\nPress use again to use the item.\n\nChange weapon to cancel, press drop to drop");
	}

	virtual void DropMessage()
	{
		owner.A_Print("You dropped the item");
	}

	virtual void UseSound()
	{
		owner.A_StartSound("UI/PDA/UseCategory", flags:CHANF_LOCAL);
	}

	virtual void UseFunction()
	{
		owner.A_Print("Wowwie you used the item!");
	}

	override void Tick()
	{
		if(!owner)
		{
			if(vel.z == 0 && GetAge() > 3)
			{
				if(!hasdropped)
				{
					A_StartSound(deathsound);
					hasdropped = true;
					A_Stop();
				}
			}

			curweapon = null;
		}
		else
		{
		//Console.Printf("" .. owner.player.mo.InvSel.GetClassName()); 
			if(owner.player)
			{
				if(owner.player.readyweapon)
				{
					if(curweapon && curweapon != owner.player.readyweapon.GetClass())
					{
						hasused = false;
						curweapon = null;
						ChangedItem();
					}
				}
				/*if(GetClass() != owner.player.mo.InvSel.GetClass())
				{
					hasused = false;
					curweapon = null;
				}*/

				if(hasused && owner.player.cmd.buttons & BT_ZOOM)
				{
					owner.GiveInventory("RLItemManipulationRemover", 1);
					PressedDrop();
					DropMessage();
					ConsumeItem();

					hasused = false;
					curweapon = null;
					ChangedItem();
					Super.Tick();
					return;
				}
			}
		}
		Super.Tick();
	}

	void ChangedItem()
	{
		ThinkerIterator i = ThinkerIterator.Create("DRLAX_BaseInventory");
		DRLAX_BaseInventory c;
		while(c = DRLAX_BaseInventory(i.Next()))
		{
			if(c.owner == owner)
			{
				c.hasused = false;
				c.curinv = null;
				c.curweapon = null;
			}
		}
	}

	virtual void ConsumeItem()
	{
		if(owner.CountInv(GetClassNAme()) > 1)
		{
			owner.TakeInventory(GetClassName(), 1);
			return;
		}
		Destroy();
	}

	override bool CanPickup(Actor toucher)
	{
		if(velz != 0)
		{
			return false;
		}

		return true;
	}

	override void Travelled()
	{
		hasused = false;
		curweapon = null;
		curinv = null;
	}
}

Class DRLAX_DummyItemGet : Powerup
{
	Default
	{
		powerup.duration 1;
	}
}

Class DRLAX_FamiliarBall : DRLAX_BaseInventory
{
	Default
	{
		inventory.amount 1;
		DeathSound "familiars/familiarballland";
		Inventory.Icon "FAMLBAL";
		inventory.pickupsound "familiars/familiarballup";
		scale 0.35;
		+FORCEXYBILLBOARD;
		tag "Empty Familiar Ball";
	}

	String familiar;

	states
	{
		Spawn:
		FAML B 10;
		FAML B 10 bright;
		loop;
	}

	override void PostBeginPlay()
	{
		//Init("Imp");
	}

	override void UseMessage()
	{
		if(!familiar)
		{
			return;
		}
		String f = familiar;
		f.ToUpper();
		String s = Stringtable.Localize("$" .. "TXT_" .. f .. "FAMILIAR");
		
		owner.A_Print(s  .. "\n\n------------------------------------------------\n
		Press use again to summon this familiar. It will fight alongside you.\n
		You may recall the familiar to the ball by holding \caUse\c- while standing next to it.\n
		Press \caDrop Item (DRLA)\c- to drop the Familiar Ball.", 8.0);
	}

	override void UseFunction()
	{
		if(!familiar)
		{
			return;
		}
		owner.A_Print("");

		DRLAX_FamiliarManager.NewFamiliar(owner, "DRLAX_" .. familiar .. "Familiar");
		owner.A_StartSound("familiars/familiarball", CHAN_ITEM);
		ConsumeItem();
	}

	override void DropMessage()
	{
		owner.A_Print("You dropped the \ct" .. GetTag());
	}

	void Init(String familiarname)
	{
		familiar = familiarname;
		String s = familiar;
		s.Replace("Familiar", "");
		SetTag("Familiar Ball - " .. s);
		//pickupmessage = tag;
	}

	override void PressedDrop()
	{
		bool spawned;
		Actor act;
		[spawned, act] = owner.A_SpawnItemEx(GetClass(),0,0,32,9);
		if(act && spawned)
		{
			DRLAX_FamiliarBall f = DRLAX_FamiliarBall(act);
			if(f)
			{
				f.Init(familiar);
			}
			//act.ObtainInventory(self);
		}
	}

	override String PickupMessage()
	{
		return "Picked up a " .. GetTag();
	}
}

class DRLAX_RadarDevice : DRLAX_BaseInventory
{
	Default
	{
		Inventory.Icon "LAXITE5";
		inventory.maxamount 4;
		Inventory.InterhubAmount 4;
		inventory.pickupsound "misc/modpackpickup";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up a Radar Device.";
		//species "Player";
		DeathSound "items/radardrop";
		tag "Radar Device";
	}

	States
	{
		Spawn:
		SNRB B 8;
		SNRB C 8 bright;
		loop;
	}

	override String PickupMessage()
	{
		return "Picked up a " .. GetTag();
	}

	override void UseMessage()
	{
		owner.A_Print("Use the Radar again to reveal the full Auto Map. Points of interest will also be highlighted.\n\nPress \caDrop Item (DRLA)\c- to drop it, or switch weapons to cancel.", 8.0);
	}

	override void UseFunction()
	{
		owner.A_Print("");
		owner.Spawn("DRLAX_RadarCircle", owner.pos);
		//owner.GiveInventory("Allmap", 1);
    	owner.GiveInventory("RLDoomScanner", 1);
		owner.A_PlaySound("misc/trackingmappickup", attenuation:ATTN_NONE);
		ConsumeItem();
	}

	override void DropMessage()
	{
		owner.A_Print("You dropped the " .. GetTag());
	}
}

class DRLAX_RadarCircle : MapMarker
{
	Default
	{
		Scale 0.0;
		+NOINTERACTION;
	}

	States
	{
		Spawn:
		SNRB A 1
		{
			A_SetScale(scale.x + 0.06, scale.y + 0.06);
			if(GetAge() > 35*4)
			{
				A_FadeOut(0.1);
			}			
		}
		loop;
	}

	override void PostBeginPlay()
	{
		ThinkerIterator i = ThinkerIterator.Create("Actor");
		Actor c;
		while(c = Actor(i.Next()))
		{
			if(c is "DRLAX_GizmoObject" || c is "RLRarityBeamUnique" || c is "RLRarityBeamUniqueWorld" ||
			 c is "RLRarityBeamDemonic" || c is "RLRarityBeamDemonicWorld" || c is "RLRarityBeamLegendary" || c is "RLRarityBeamLegendaryWorld" ||
			(c is "RLSupplyCrate" && c.health > 0))
			{
				Spawn("DRLAX_QuestionMarkMapMarker", c.pos);
			}
		}

		for(int i=0; i<level.sectors.Size(); i++)
		{
			if(level.sectors[i].IsSecret())
			{
				Spawn("DRLAX_QuestionMarkMapMarker", (level.sectors[i].CenterSpot.x, level.sectors[i].CenterSpot.y, 0));
			}
		}
	}
}

class DRLAX_QuestionMarkMapMarker : MapMarker
{
	Default
	{
		+NOINTERACTION;
		scale 1.0;
	}

	states
	{
		Spawn:
		SNRB M 60 
		{
			for(int i; i<players.Size(); i++)
			{
				if(players[i].mo && players[i].mo.Distance2D(self) < 128)
				{
					SetStateLabel("See");
					break;
				}
			}
		}
		loop;
		See:
		SNRB M -1 A_SetRenderStyle(0.25, STYLE_Translucent);
		stop;
	}
}

class DRLAX_RadarPing : MapMarker
{
	Default
	{
		+NOINTERACTION;
		scale 0.25;
	}

	States
	{
		Spawn:
		"####" "#" 235;
		Fade:
		"####" "#" 1 A_FadeOut(0.008);
		loop;
	}
}


class DRLAX_SoulTrap : DRLAX_BaseInventory
{
	Default
	{
		alpha 0.5;
		scale 0.8;
		renderstyle "STYLE_TRANSLUCENT";
		Inventory.Icon "SOLTRAPI";
		inventory.maxamount 8;
		Inventory.InterhubAmount 8;
		Inventory.Pickupsound "familiars/familiarballup";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up a Soul Trap.";
		//species "Player";
		DeathSound "items/glassdrop";
		tag "Soul Trap";
	}

	States
	{
		Spawn:
		SNRB D 8;
		SNRB D 8 bright;
		loop;
	}

	override String PickupMessage()
	{
		return "Picked up a " .. GetTag();
	}

	override void UseMessage()
	{
		owner.A_Print("Use the Soul Trap again to capture the effect of a nearby Sphere Power Up for later use.\n\nPress \caDrop Item (DRLA)\c- to drop it, or switch weapons to cancel.", 8.0);
	}

	override void UseFunction()
	{
		Array<String> powerups;

		powerups.Push("RLSoulsphere2");
		powerups.Push("RLSoulsphere3");
		powerups.Push("RLSoulsphere4");
		powerups.Push("Megasphere2");
		powerups.Push("InvulnerabilitySphere2");
		powerups.Push("BlurSphere2");
		powerups.Push("RLFIREBLUSphere");
		powerups.Push("RLAaaghSphere");

		ThinkerIterator i = ThinkerIterator.Create("Inventory");
		Inventory inv;
		while(inv = Inventory(i.Next()))
		{
			if(inv.owner || owner.Distance3D(inv) > 200)
			{
				continue;
			}

			for(int i = 0; i<powerups.Size(); i++)
			{
				if(inv.GetClassName() == powerups[i])
				{
					Convert(powerups[i]);
					ConsumeItem();
					Spawn("DRLAX_TrappedPowerupFX", inv.pos + (0,0,32));
					inv.Destroy();
					return;
				}
			}
		}

		owner.A_Print("No Sphere Power Ups nearby.");
	}

	override void DropMessage()
	{
		owner.A_Print("You dropped the " .. GetTag());
	}

	void Convert(String p)
	{
		String i;
		if(p ~== "InvulnerabilitySphere2") {i = "DRLAX_TrappedInvulnerabilitySphere";}
		if(p ~== "BlurSphere2") {i = "DRLAX_TrappedInvisibilitySphere";}
		if(p ~== "Megasphere2") {i = "DRLAX_TrappedMegaSphere";}
		if(p ~== "RLSoulsphere2") {i = "DRLAX_TrappedSoulSphere";}
		if(p ~== "RLSoulsphere3") {i = "DRLAX_TrappedSoulSphere3";}
		if(p ~== "RLSoulsphere4") {i = "DRLAX_TrappedSoulSphere4";}
		if(p ~== "RLAaaghSphere") {i = "DRLAX_TrappedAGHSphere";}
		if(p ~== "RLFIREBLUSphere") { i = "DRLAX_TrappedFirebluSphere";}

		owner.GiveInventory(i, 1);
		PlayerPawn p = PlayerPawn(owner);
		Inventory inv = owner.FindInventory(i);
		p.invsel = inv;
		inv.owner.A_PlaySound("items/soultrap");
	}
}

class DRLAX_TrappedSoulBase : DRLAX_BaseInventory
{
	Default
	{
		scale 0.5;
		Inventory.Icon "SOLTRAPI";
		inventory.maxamount 8;
		Inventory.InterhubAmount 8;
		Inventory.Pickupsound "";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up a Trapped Sphere.";
		//species "Player";
		DeathSound "items/glassdrop";
		tag "Trapped Sphere";
		translation "CMMDRLA_CyanFog";
	}

	States
	{
		Spawn:
		SNRB D 8;
		SNRB D 8 bright;
		loop;
	}

	String powerupitem;

	virtual void Init()
	{
		powerupitem = "";
	}

	override void UseMessage()
	{
		owner.A_Print("Use the Trapped Sphere again to invoke its effect.\n\nPress \caDrop Item (DRLA)\c- to drop it, or switch weapons to cancel.", 8.0);
	}

	override void UseFunction()
	{
		Spawn(powerupitem, owner.pos);
		if(owner.velx + owner.vely == 0)
		{
			owner.A_ChangeVelocity(0.001, 0, 0, CVF_RELATIVE);
		}

		ConsumeItem();
	}

	override void DropMessage()
	{
		owner.A_Print("You dropped the " .. GetTag());
	}

	override void PostBeginPlay()
	{
		Init();
	}

}

class DRLAX_TrappedInvulnerabilitySphere : DRLAX_TrappedSoulBase
{
	Default
	{
		Inventory.Icon "SOLINVUL";
		Inventory.PickupMessage "You picked up a Trapped Invulnerability Sphere.";
		tag "Trapped Invulnerability Sphere";
	}

	states
	{
		Spawn:
		PINV A 8;
		PINV A 8 bright;
		loop;
	}

	override void Init()
	{
		powerupitem = "InvulnerabilitySphere2";
	}
}

class DRLAX_TrappedInvisibilitySphere : DRLAX_TrappedSoulBase
{
	Default
	{
		Inventory.Icon "SOLBLUR";
		Inventory.PickupMessage "You picked up a Trapped Invisibility Sphere.";
		tag "Trapped Invisibility Sphere";
	}

	states
	{
		Spawn:
		PINS A 8;
		PINS A 8 bright;
		loop;
	}

	override void Init()
	{
		powerupitem = "BlurSphere2";
	}
}


class DRLAX_TrappedSoulSphere : DRLAX_TrappedSoulBase
{
	Default
	{
		Inventory.Icon "SOLSOUL";
		Inventory.PickupMessage "You picked up a Trapped Soul Sphere.";
		tag "Trapped Soul Sphere";
	}

	states
	{
		Spawn:
		SOUL A 8;
		SOUL A 8 bright;
		loop;
	}

	override void Init()
	{
		powerupitem = "RLSoulSphere2";
	}
}

class DRLAX_TrappedSoulSphere3 : DRLAX_TrappedSoulBase
{
	Default
	{
		Inventory.Icon "SOLSOUL3";
		Inventory.PickupMessage "You picked up a Trapped Soul Sphere.";
		tag "Trapped Soul Sphere";
	}

	states
	{
		Spawn:
		SOUL A 8;
		SOUL A 8 bright;
		loop;
	}

	override void Init()
	{
		powerupitem = "RLSoulSphere3";
	}
}

class DRLAX_TrappedSoulSphere4 : DRLAX_TrappedSoulBase
{
	Default
	{
		Inventory.Icon "SOLSOUL4";
		Inventory.PickupMessage "You picked up a Trapped Soul Sphere.";
		tag "Trapped Soul Sphere"; 
	}

	states
	{
		Spawn:
		SOUL A 8;
		SOUL A 8 bright;
		loop;
	}

	override void Init()
	{
		powerupitem = "RLSoulSphere4";
	}
}


class DRLAX_TrappedMegaSphere : DRLAX_TrappedSoulBase
{
	Default
	{
		Inventory.Icon "SOLMEGA";
		Inventory.PickupMessage "You picked up a Trapped Mega Sphere.";
		tag "Trapped Mega Sphere";
	}

	states
	{
		Spawn:
		MEGA A 8;
		MEGA A 8 bright;
		loop;
	}

	override void Init()
	{
		powerupitem = "Megasphere2";
	}
}

class DRLAX_TrappedAGHSphere : DRLAX_TrappedSoulBase
{
	Default
	{
		Inventory.Icon "SOLAAGH";
		Inventory.PickupMessage "You picked up a Trapped AGH Sphere.";
		tag "Trapped AGH Sphere";
	}

	states
	{
		Spawn:
		RSPH A 8;
		RSPH A 8 bright;
		loop;
	}

	override void Init()
	{
		powerupitem = "RLAaaghSphere";
	}
}


class DRLAX_TrappedFirebluSphere : DRLAX_TrappedSoulBase
{
	Default
	{
		Inventory.Icon "SOLFIRB";
		Inventory.PickupMessage "You picked up a Trapped Fireblu Sphere.";
		tag "Trapped Fireblu Sphere";
	}

	states
	{
		Spawn:
		FBLS A 8;
		FBLS A 8 bright;
		loop;
	}

	override void Init()
	{
		powerupitem = "RLFIREBLUSphere";
	}
}

class DRLAX_TrappedPowerupFX : Actor
{
    Default
    {
        +NOINTERACTION;
        +NOGRAVITY;
        Height 2;
        radius 2;
        Translation "CMMDRLA_CyanFog";
        Renderstyle "Add";
        Alpha 0.8;
		scale 0.5;
    }

    states
    {
        Spawn:
        TNT1 A 0;
        NRXP ABCDEF 3 Bright;
		stop;
	}

	override void Tick()
	{
		A_SetScale(scale.x + 0.1, scale.y + 0.1);
		Super.Tick();
	}
}

class DRLAX_SmokeBomb : DRLAX_BaseInventory
{
	Default
	{
		Inventory.Icon "LAXITE10";
		inventory.maxamount 4;
		Inventory.InterhubAmount 4;
		inventory.pickupsound "items/smokebombpickup";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up a Smoke Bomb.";
		//species "Player";
		DeathSound "weapons/gundropsmall1";
		tag "Smoke Bomb";
	}

	States
	{
		Spawn:
		SMKB A 6;
		SMKB A 6 bright;
		loop;
	}

	override String PickupMessage()
	{
		return "Picked up a " .. GetTag();
	}

	override void UseMessage()
	{
		owner.A_Print("Use the Smoke Bomb again to leave behind a smoke cloud that enemies will target.\n\nPress \caDrop Item (DRLA)\c- to drop it, or switch weapons to cancel.", 8.0);
	}

	override void UseFunction()
	{
		if(owner.CountInv("DRLAX_SmokeBombInvis") > 0)
		{
			owner.A_Print("");
			return;
		}
		owner.A_Print("");
		owner.A_SpawnItemEx("DRLAX_SmokeBombActivate", flags:SXF_NOCHECKPOSITION);
		ConsumeItem();
	}

	override void DropMessage()
	{
		owner.A_Print("You dropped the " .. GetTag());
	}
}

class DRLAX_SmokeBombActivate : Actor
{
	Default
	{
		+MISSILE;
		+THRUACTORS;
		+SHOOTABLE;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+NOCLIP;
		+NODAMAGETHRUST;
		health 999;
		tag "Distracting Smoke";
		height 52;
		gravity 9999.0;
		mass 9999999999;
	}

	states
	{
		Spawn:
		TNT1 A 0;
		TNT1 A 345
		{
			for(int i; i<30; i++)
			{
				A_SpawnItemEx("DRLAX_SmokeBombSmoke", 0, 0, 32, 20, 0, 0, 12 * i, SXF_NOCHECKPOSITION);
			}

			A_StartSound("items/smokebomb");
			SetOrigin((pos.x, pos.y, floorz), true);

			if(!target)
			{
				Destroy();
				return;
			}

			ThinkerIterator i = ThinkerIterator.Create("Actor");
			Actor c;

			while(c = Actor(i.Next()))
			{
				if(c.bISMONSTER && !c.bFRIENDLY && c.health > 0)
				{
					if(c.target && c.target == target)
					{
						c.target = self;
						c.lastheard = target;
					}
				}
			}

			target.GiveInventory("DRLAX_SmokeBombInvis", 1);
		}
		stop;
	}

	override void Tick()
	{
		if(GetAge() > 1)
		{
			A_Stop();
			Warp(self, flags:WARPF_NOCHECKPOSITION|WARPF_TOFLOOR);
		}

		if(GetAge() % 2 == 0)
		{
			A_SpawnItemEx("DRLAX_SmokeBombSmokeEffect", random(-30,30), random(-30,30), random(0, 60), flags:SXF_NOCHECKPOSITION);
		}
		Super.Tick();
	}
}

class DRLAX_SmokeBombInvis : PowerInvisibility
{
	Default
	{
		Powerup.Mode "Translucent";
		powerup.duration -10;
		+INVENTORY.NOSCREENBLINK;
	}

	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if(passive && GetAge() < 35*2 && owner)
		{
			newdamage = 0;
		}

		if(!passive && owner && owner.player && flags & DMG_PLAYERATTACK && 
		owner.player.readyweapon is "RLStealthRifle" || owner.player.readyweapon is "RLSilencedPistol")
		{
			if(owner.CountInv("PowerInvisibility") == 0)
			{
				newdamage = newdamage * 4;
			}
		}
	}

	override void InitEffect()
	{
		if(owner && owner.player)
		{
			players[owner.PlayerNumber()].cheats |= CF_NOTARGET;
		}
		Powerup.InitEffect();
	}

	override void EndEffect ()
	{
		if(owner && owner.player)
		{
			players[owner.PlayerNumber()].cheats &= ~CF_NOTARGET;
		
			Owner.A_SetRenderStyle(1, STYLE_Normal);

			for(let item = Owner.Inv; item != null; item = item.Inv)
			{
				if (item != self && item is 'PowerInvisibility')
				{
					item.DoEffect();
				}
			}
		}
		Powerup.EndEffect();
	}
}


class DRLAX_SmokeBombSmoke : Actor
{
	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		alpha 0.8;
		scale 0.5;
		renderstyle "Add";
	}

	States
	{
		Spawn:
		SMK2 ABCDEFGHIJKLMNOPQ 1;
		stop;
	}

	override void Tick()
	{
		A_ScaleVelocity(0.95);
		A_FadeOut(0.01);
		Super.Tick();
	}
}

class DRLAX_SmokeBombSmokeEffect : DRLAX_SmokeBombSmoke
{
	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		alpha 0.8;
		translation "CMMDRLA_Greyscale";
	}

	States
	{
		Spawn:
		SMK2 ABCDEFGHIJKLMNOPQ 2;
		stop;
	}
}

/*
Class testy : Actor
{
	Default
	{
		+MISSILE;
	}

	override void PostBeginPlay()
	{
		ThinkerIterator i = ThinkerIterator.Create("Inventory");
		Inventory c;
		while(c = Inventory(i.Next()))
		{
			if(c is "Powerup")
			{
				c.Destroy();
			}
		}

		Console.Printf("" .. target.bSHADOW);
	}
}*/


class DRLAX_UnchargedModItem : DRLAX_BaseInventory
{
	Default
	{
		Inventory.Icon "GMODY0";
		inventory.maxamount 8;
		Inventory.InterhubAmount 8;
		inventory.pickupsound "misc/modpackpickup";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up an Uncharged Mod Pack.";
		//species "Player";
		DeathSound "weapons/gundrop";
		tag "Uncharged Mod Pack";
	}

	uint seed;

	Override void PostBeginPlay()
	{
		seed = random(0, 9999);
	}

	States
	{
		Spawn:
		GMOD Z 6;
		GMOD Z 6 Bright;
		loop;
	}

	override bool CanPickup(Actor toucher)
	{
		if(velz != 0)
		{
			return false;
		}

		if(toucher.CountInv("RLModLimit") < 4 && toucher.CountInv("RLScavengerModLimit") < 8)
		{
			if(toucher.CountInv("RLScavengerPerk") > 0)
			{
				toucher.GiveInventory("RLScavengerModLimit", 1);
			}
			else
			{
				toucher.GiveInventory("RLModLimit", 1);
			}

			return true;
		}
		
		return false;
	}

	override String PickupMessage()
	{
		return "Picked up a " .. GetTag();
	}

	override void UseMessage()
	{
		owner.A_Print("This Mod Pack does nothing. It will change into an Exotic Mod Pack on the next level.\n\nPress \caDrop Item (DRLA)\c- to drop it, or switch weapons to cancel.", 8.0);
	}

	override void UseFunction()
	{
		UseMessage();
	}

	override void DropMessage()
	{
		owner.A_Print("You dropped the " .. GetTag());
	}

	override void Tick()
	{
		if(owner && Level.Time == 5)
		{
			while(Owner.CountInv("DRLAX_UnchargedModItem") > 0)
			{
				GiveRandomModItem();
				
				if(owner.CountInv("RLScavengerPerk") > 0)
				{
					owner.TakeInventory("RLScavengerModLimit", 1);
				}
				else
				{
					owner.TakeInventory("RLModLimit", 1);
				}

				ConsumeItem();
				if(!owner)
				{
					DetachFromOwner();
					Destroy();
					return;
				}
			}
		}
		Super.Tick();
	}

	void GiveRandomModItem()
	{
		uint mod;

		while(seed > 0)
		{
			mod++;
			if(mod == 4)
			{
				mod = 0;
			}
			seed--;
		}

		String mods[] =
		{
			"RLSniperModItem",
			"RLNanoModItem",
			"RLFireStormModItem",
			"RLOnyxModItem"
		};

		let m = Inventory(Spawn(mods[mod], owner.pos));
		if(m)
		{
			m.Touch(owner);
		}
		seed = random(0, 999);
	}

	override void PressedDrop()
	{
		if(owner.CountInv("RLScavengerPerk") > 0)
		{
			owner.TakeInventory("RLScavengerModLimit", 1);
		}
		else
		{
			owner.TakeInventory("RLModLimit", 1);
		}
		DefaultDrop();
	}
}

class DRLAX_NanoTape : DRLAX_BaseInventory
{
	Default
	{
		Inventory.Icon "LAXITE11";
		inventory.maxamount 4;
		Inventory.InterhubAmount 4;
		inventory.pickupsound "";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up the Nano Tape.";
		//species "Player";
		DeathSound "weapons/gundropsmall";
		tag "Nano Tape";
	}

	States
	{
		Spawn:
		SNRB E 6;
		SNRB E 6 Bright;
		loop;
	}

	override String PickupMessage()
	{
		return "Picked up the " .. GetTag();
	}

	override void UseMessage()
	{
		owner.A_Print("Press use again to combine two nearby Chainsaws, Uzis or Nuclear Plasma Rifles into a double weapon.\n\nPress \caDrop Item (DRLA)\c- to drop it, or switch weapons to cancel.", 8.0);
	}

	static const String weps[] = 
	{
		"RLChainsawPickup",
		"RLUziPickup",
		"RLNuclearPlasmaRiflePickup",
		"RLHighPowerNuclearPlasmaRiflePickup"
	};

	static const String newitem[] = 
	{
		"RLDoubleChainsawPickup",
		"RLStormUziPickup",
		"RLNuclearOnslaughtPickup",
		"RLNuclearOnslaughtPickup"
	};

	override void UseFunction()
	{
		ThinkerIterator ti = ThinkerIterator.Create("Actor");
        Actor a, b;

        while(b = Actor(ti.Next()))
        {
			if(b && b.GetAge() > 3 && owner.Distance3D(b) < 128 && b != a)
			{
                for(int i = 0; i<weps.Size(); i++)
				{
					if(b.GetClassName() == weps[i] || b.GetClassName() == weps[i] .. "Modded")
					{
						if(!a)
						{
							a = b;
							ti = ThinkerIterator.Create("Actor");
						}
						else
						{
							if(CompareGuns(a.GetClassName(), b.GetClassName()))
							{
								let inv = Inventory(Spawn(newitem[i], owner.pos));
								if(inv)
								{
									inv.Touch(owner);
								}
								let fx = Spawn("DRLAX_ObtainFX", a.pos);
								if(fx)
								{
								fx.tracer = owner;
								fx.sprite = a.sprite;
								fx.frame = a.frame;
								}
								
								fx = Spawn("DRLAX_ObtainFX", b.pos);
								if(fx)
								{
								fx.tracer = owner;
								fx.sprite = b.sprite;
								fx.frame = b.frame;
								}

								a.Destroy();
								b.Destroy();
								owner.A_StartSound("weapons/flamethrowerload");
								ConsumeItem();
								return;
							}
						}
					}
				}
			}
		}

		owner.A_PlaySound ("hud/error", CHAN_ITEM, 1, 0, 1.5);
        owner.A_Print("There are no two compatible weapons nearby.", 5);
	}

	override void DropMessage()
	{
		owner.A_Print("You dropped the " .. GetTag());
	}

	bool CompareGuns(String a, String b)
	{
		String oa = a;

		if(CompareAltString(a, b))
		{
			return true;
		}

		a = a .. "Modded";

		if(CompareAltString(a, b))
		{
			return true;
		}

		a = oa;
		b = b .. "Modded";

		if(CompareAltString(a, b))
		{
			return true;
		}

		return false;
	}

	bool CompareAltString(String a, String b)
	{
		return (b == a || a == weps[2] && b == weps[3] || a == weps[3] && b == weps[2]);
	}
}

class DRLAX_ObtainFX : Actor
{
    Default
    {
        +THRUACTORS;
        -SOLID;
        +NOGRAVITY;
        +ROLLSPRITE;
        +MISSILE;
        +SEEKERMISSILE;
        speed 15;
    }

    states
    {
        Spawn:
        "####" "#" 35;
        stop;
    }

    override void Tick()
    {
        //SetOrigin((startpos + dest) * (0.001 * GetAge()), true);
        A_SeekerMissile(90, 90, SMF_PRECISE);
        //A_ChangeVelocity(0, 0, 3, CVF_RELATIVE);
        speed++;
        //roll += 10;
        if(Distance2D(tracer) < 16)
        {
            Destroy();
            return;
        }
        Super.Tick();
    }
}


class DRLAX_SawArm : DRLAX_BaseInventory
{
	Default
	{
		Inventory.Icon "LAXITE2";
		inventory.maxamount 4;
		Inventory.InterhubAmount 4;
		inventory.pickupsound "weapons/pistolweaponpickup";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up the Auto-Saw Arm.";
		//species "Player";
		DeathSound "weapons/gundrop";
		tag "Auto-Saw Arm";
	}

	States
	{
		Spawn:
		SNRB F 6;
		SNRB F 6 Bright;
		loop;
	}

	override String PickupMessage()
	{
		return "Picked up the " .. GetTag();
	}

	override void UseMessage()
	{
		owner.A_Print("The Auto Saw Arm will automatically attack nearby enemies with any chainsaws in your inventory.\n\nPress \caDrop Item (DRLA)\c- to drop it, or switch weapons to cancel.", 8.0);
	}

	override void UseFunction()
	{
		
	}

	override void DropMessage()
	{
		owner.A_Print("You dropped the " .. GetTag());
	}

	int cooldown;

	override void Tick()
	{
		if(owner && cooldown == 0)
		{
			FLineTraceData RemoteRay;
			bool hit = owner.LineTrace(
			owner.angle,
			52,
			owner.pitch,
			offsetz: 52 * owner.GetCrouchFactor(),
			data: RemoteRay
			);

			if (hit && RemoteRay.HitType == TRACE_HitActor && RemoteRay.HitActor.health > 0 && 
			RemoteRay.HitActor.bISMONSTER && !RemoteRay.HitActor.bFRIENDLY)
			{
				if(ChainsawAttack())
				{
					cooldown = 10 * (5 - owner.CountInv("DRLAX_SawArm"));
				}
			}
		}

		if(cooldown > 0)
		{
			cooldown--;
		}

		for(int i; i<sawcds.Size(); i++)
		{
			if(sawcds[i] > 0)
			{
				sawcds[i]--;
			}
		}
		Super.Tick();
	}

	int sawcds[5];

	bool ChainsawAttack()
	{
		String weps[] = 
		{
			"RLChainsaw",
			"RLPiercingChainsaw",
			"RLDoubleChainsaw",
			"RLRipper",
			"RLEnergysaw"
		};

		String sprites[] = 
		{
			"NSAW",
			"PSAW",
			"DSAW",
			"RIPP",
			"ESAW" // X
		};

		String sounds[] = 
		{
			"weapons/sawfull",
			"weapons/sawfull",
			"weapons/sawfull",
			"weapons/ripperfull",
			"weapons/energysawbegin"
		};

		Array<int> saws;

		for(int i; i < weps.Size(); i++)
		{
			if(owner.CountInv(weps[i]) > 0 && sawcds[i] == 0 && owner.player.readyweapon.GetClassName() != weps[i])
			{
				if(i == 4 && owner.CountInv("Cell") < 10)
				{
					continue;
				}
				saws.Push(i);
			}
		}

		if(saws.Size() == 0)
		{
			return false;
		}

		int r = random(0, saws.Size() - 1);

		sawcds[saws[r]] = 50;
		DRLAX_SawArmAttack sa = DRLAX_SawArmAttack(Spawn("DRLAX_SawArmAttack", owner.pos));

		if(sa)
		{
			sa.sprite = GetSpriteIndex(sprites[saws[r]]);
			sa.target = owner;
			owner.A_StartSound(sounds[saws[r]], slot:CHAN_WEAPON);
			sa.saw = saws[r];
			return true;
		}

		return false;
	}
}


class DRLAX_SawArmAttack : Actor
{
	Default
	{
		+NOINTERACTION;
		+MISSILE;
		+NOGRAVITY;
		+FLATSPRITE;
		+ROLLSPRITE;
		scale 0.7;
	}

	int wangle;
	int attackfreq;
	int saw;
	Actor hit;

	states
	{
		Spawn:
		"####" X -1;
		stop;
	}

	override void Tick()
	{
		if(!target)
		{
			Destroy();
			return;
		}

		wangle -= 10;
		Warp(target, 40, 0, 35, -90 + wangle, WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION);

		if(GetAge() % (5 - attackfreq) == 0)
		{
			int extradmg;

			if(target.CountInv("RLCyberwarriorArmorBonus") > 0)
			{
				extradmg = 3;
			}

			switch(saw)
			{
				Case 0:
				DoSaw("weapons/sawhit", 2 + extradmg, "Melee", 65, 0);
				//target.player.readyweapon.A_Saw ("weapons/sawfull", "weapons/sawhit", 2, "Melee", 65);
				break;

				Case 1:
				DoSaw("weapons/sawhit", 3 + extradmg, "Piercing", 65, 0);
				//target.player.readyweapon.A_Saw ("weapons/sawfull", "weapons/sawhit", 3, "Piercing", 65);
				break;

				Case 2:
				DoSaw("weapons/doublesawhit", 6 + extradmg, "Melee", 65, 0);
				//target.player.readyweapon.A_Saw ("weapons/doublesawfull", "weapons/doublesawhit", 6, "Melee", 65);
				break;

				Case 3:
				DoSaw("weapons/ripperhit", 2 + extradmg, "Melee", 65, 0.15);
				//target.player.readyweapon.A_Saw ("weapons/ripperfull", "weapons/ripperhit", 2, "Melee", 65);
				break;

				Case 4:
				DoSaw("wweapons/energysawhit", 10, "Plasma", 65, 0);
				A_SpawnItemEx("RLEnergySawSpark", 48, 0, 0, random(-4, 4), random(-4, 4), random(-4, 4), 0);
				//target.player.readyweapon.A_RailAttack (10*random(1,5), 4, 0, "None", "Green", RGF_SILENT | RGF_FULLBRIGHT, 10, "RLEnergySawPuff", 0, 0, 128, 2, 0.1, 0, "RLEnergySawSpark", 0);
				break;
			}
		}

		if(GetAge() == 20)
		{
			Destroy();
			return;
		}

		Super.Tick();
	}

	void DoSaw(String sound, int dmg, String dmgtype, int range, float lifesteal)
	{
		damagetype = dmgtype;
		FLineTraceData RemoteRay;
		bool hit = target.LineTrace(
		target.angle,
		52,
		0,
		offsetz: 52 * target.GetCrouchFactor(),
		data: RemoteRay
		);

		if(hit && RemoteRay.HitActor)
		{
			int hitdmg = RemoteRay.HitActor.DamageMobj(self, target, random(1,8) * dmg, dmgtype);
			target.A_StartSound(sound);

			if(hitdmg > 0 && lifesteal > 0)
			{
				if(target && target.health > 0 && target.health < 100)
				{
					target.health = Min(100, (target.health + (hitdmg * lifesteal)));
				}
			}
		}
	}

	override void PostBeginPlay()
	{
		pitch = 180;
		wangle = -180;
		roll = 90;

		if(saw > 1)
		{
			attackfreq = 2;
		}

		if(saw == 4)
		{
			target.TakeInventory("Cell", 10);
		}
	}
}

class DRLAX_CursedDagger : DRLAX_BaseInventory
{
	Default
	{
		Inventory.Icon "LAXITE1";
		inventory.maxamount 1;
		Inventory.InterhubAmount 1;
		inventory.pickupsound "items/curseddaggerpickup";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up the \cgCursed Dagger\c-.";
		//species "Player";
		DeathSound "weapons/gundropsmall2";
		tag "\cgCursed Dagger";
		scale 0.5;
	}

	uint maxblood;
	uint bleeds;

	States
	{
		Spawn:
		SNRB G 6;
		SNRB G 6 Bright;
		loop;
	}

	override String PickupMessage()
	{
		return "Picked up the " .. GetTag();
	}

	override void UseMessage()
	{
		owner.A_Print("The cursed dagger increases the chance of finding demonic items, but \cgsets your health to 10\c- at the start of each level.\n\nPress \caDrop Item (DRLA)\c- to drop it, or switch weapons to cancel.", 8.0);
	}

	override void UseFunction()
	{
		
	}

	override void DropMessage()
	{
		owner.A_Print("You dropped the " .. GetTag());
	}

	override void PressedDrop()
	{
		bool spawned;
		Actor act;
		[spawned, act] = owner.A_SpawnItemEx(GetClass(),0,0,32,9);
		if(act && spawned)
		{
			let d = DRLAX_CursedDagger(act);
			if(d)
			{
				d.maxblood = maxblood;
			}
		}
	}

	override void Tick()
	{
		if(Level.MapName != "OUTPOST" && Level.MapName != "VR" && Level.MapName != "HUBMAP" && level.Time == 5)
		{
			if(owner && owner.health > 10)
			{
				bleeds++;

				owner.health = 10;
				owner.player.health = 10;
                owner.ACS_NamedExecuteAlways("SetPlayerActualHealth", 0, 10);
				owner.A_Pain();

				owner.A_Quake(6, 10, 0, 32, "");
				owner.A_Startsound("items/curseddaggerstab", slot:CHAN_6);

				if(bleeds == maxblood)
				{
					A_Log("\cgThe Cursed Dagger desolved into a red mist...");
					String demonweps[] = 
					{
						"RLDeathsGazeWorldSpawnPickup",
						"RLSoulstormRifleWorldSpawnPickup",
						"RLUnmakerWorldSpawnPickup",
						"RLHellsReignWorldSpawnPickup"
					};
					CMMSS_Actor_SafeSpawner ss = CMMSS_SafeSpawner.New("DRPGWeaponDemonicSpawner", 1, "", 32, 32, 0, CMMSS_SafeSpawner.SSFLAGS_NOMONSTERS);
					
					DetachFromOwner();
					Destroy();
					return;
				}
			}
		}
		Super.Tick();
	}


	override void PostBeginPlay()
	{
		if(maxblood == 0)
		{
			maxblood = random(1, 6);
		}
	}

}


class DRLAX_DevilMark : DRLAX_BaseInventory
{
	Default
	{
		Inventory.Icon "LAXITE12";
		inventory.maxamount 1;
		Inventory.InterhubAmount 1;
		inventory.pickupsound "";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up the Abyss Trophy.";
		//species "Player";
		DeathSound "";
		tag "Abyss Trophy";
		+FLOATBOB;
	}

	States
	{
		Spawn:
		SNRB H 6;
		loop;
	}

	override String PickupMessage()
	{
		return "Picked up the " .. GetTag();
	}

	override void UseMessage()
	{
		owner.A_Print("A charred skull with an unsettling aura. Feels like more pain awaits you in the future...\n\nPress \caDrop Item (DRLA)\c- to drop it, or switch weapons to cancel.", 8.0);
		//owner.A_PlaySound("hud/generic");
	}

	override void UseFunction()
	{
		
	}

	override void DropMessage()
	{
		owner.A_Print("You dropped the " .. GetTag());
	}

}

class DRLAX_WeaponKitBase : DRLAX_BaseInventory
{
	Default
	{
		Inventory.Icon "LAXITE12";
		inventory.maxamount 1;
		Inventory.InterhubAmount 1;
		inventory.pickupsound "items/weaponkitpickup";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up the Weapon Kit.";
		//species "Player";
		DeathSound "weapons/gundropsmall2";
		tag "Weapon Kit";
	}

	States
	{
		Spawn:
		SNRB I 6;
		SNRB I 6 Bright;
		loop;
	}

	Array<String> weps1;
	Array<String> weps2;
	String newitem;
	String newitemname;
	String usemsg;
	int unlockslot;

	void WriteUnlock(int slot)
	{    
		if(unlockslot == 0)
		{
			return;
		}

        String d = Cvar.GetCvar("DRLAX_weaponkits").GetString();
        String s;

        for(int i; i<4; i++)
        {
            if(i == slot - 1)
            {
                s = s .. "1";
                continue;
            }
            s = s .. d.CharAt(i);
        }

        Cvar.GetCvar("DRLAX_weaponkits").SetString(s);
    
		if(s == "1111")
		{
			DRLAX_UnlockThinker.WriteUnlock("Yholl");
		}
	}

	override String PickupMessage()
	{
		return "Picked up the " .. GetTag();
	}

	override void UseMessage()
	{
		owner.A_Print(usemsg .. "\n\nPress \caDrop Item (DRLA)\c- to drop it, or switch weapons to cancel.", 8.0);
		//owner.A_PlaySound("hud/generic");
	}

	override void UseFunction()
	{
		ThinkerIterator ti = ThinkerIterator.Create("Actor");
        Actor a, b, c;

        while(a = Actor(ti.Next()))
        {
			for(int i = 0; i < weps1.Size(); i++)
			{
				if(a.GetClassName() == weps1[i] && owner.Distance3D(a) < 220)
				{
					b = a;
				}
			}

			for(int i = 0; i < weps2.Size(); i++)
			{
				if(a.GetClassName() == weps2[i] && owner.Distance3D(a) < 220)
				{
					c = a;
				}
			}
		}

		if(b && c)
		{
			let inv = Inventory(Spawn(newitem, owner.pos));
			if(inv)
			{
				inv.Touch(owner);
			}
			
			let fx = Spawn("DRLAX_ObtainFX", b.pos);
			if(fx)
			{
			fx.tracer = owner;
			fx.sprite = b.sprite;
			fx.frame = b.frame;
			}
			
			fx = Spawn("DRLAX_ObtainFX", c.pos);
			if(fx)
			{
			fx.tracer = owner;
			fx.sprite = c.sprite;
			fx.frame = c.frame;
			}
			
			DRLAX_DebrisFX.Spawn(owner, 15);

			c.Destroy();
			b.Destroy();
        	owner.A_Print("\cfYou sucessfully crafted the " .. newitemname .. "\cf.", 5);
			owner.A_StartSound("items/weaponkitcraft", CHAN_6);
			WriteUnlock(unlockslot);
			ConsumeItem();
			return;
		}

		owner.A_PlaySound ("hud/error", CHAN_ITEM, 1, 0, 1.5);
        owner.A_Print("There are no two compatible weapons nearby.", 5);
	}

	override void DropMessage()
	{
		owner.A_Print("You dropped the " .. GetTag());
	}

	override void PostBeginPlay()
	{
		SetupItems();
		Super.PostBeginPlay();
	}

	virtual void SetupItems()
	{
		unlockslot = -1;
	}

	override bool CanPickup(Actor toucher)
	{
		if(toucher.FindInventory("DRLAX_WeaponKitBase", true))
		{
			return false;
		}

		if(velz != 0)
		{
			return false;
		}

		return true;
	}

	void AddWeapon(String wep, int slot)
	{
		if(slot)
		{
			weps1.Push(wep);
			weps1.Push(wep .. "Modded");	
		}
		else
		{
			weps2.Push(wep);
			weps2.Push(wep .. "Modded");	
		}
	}
}

class DRLAX_BarrelCombinerKit : DRLAX_WeaponKitBase
{
	Default
	{
		Inventory.Icon "LAXITE13";
		Inventory.PickupMessage "You picked up the Barrel Combiner Kit.";
		tag "\cdBarrel Combiner Kit";
	}

	override void SetupItems()
	{
		AddWeapon("RLHeavySuperShotgunPickup", 0);
		AddWeapon("RLFocusedDoubleShotgunPickup", 1);

		newitem = "RLQuadShotgunPickup";
		newitemname = "\cdQuad Shotgun";

		usemsg = "Press Use again to combine a nearby \cvHeavy Super Shotgun\c- and \cvFocused Double Shotgun\c- to craft a \cdQuad Shotgun\c-.";

		unlockslot = 1;
	}
}

class DRLAX_ParticleColliderKit : DRLAX_WeaponKitBase
{
	Default
	{
		Inventory.Icon "LAXITE15";
		Inventory.PickupMessage "You picked up the Particle Collider Kit.";
		tag "\cdParticle Collider Kit";
	}

	States
	{
		Spawn:
		SNRB K 6;
		SNRB K 6 Bright;
		loop;
	}

	override void SetupItems()
	{
		AddWeapon("RLBurstCannonLaserRiflePickup", 0);
		AddWeapon("RLAssaultRiflePlasmaRiflePickup", 1);
		AddWeapon("RLAssaultRifleNuclearPlasmaRiflePickup", 1);

		newitem = "RLParticleBeamCannonPickup";

		newitemname = "\cdParticle Beam Cannon";
		usemsg = "Press Use again to combine a nearby \cvAssault Plasma Rifle\c- and \cvBurst Laser Rifle\c- to craft a \cdParticle Beam Cannon\c-.";

		unlockslot = 2;
	}
}

class DRLAX_MagneticCoilKit : DRLAX_WeaponKitBase
{
	Default
	{
		Inventory.Icon "LAXITE14";
		Inventory.PickupMessage "You picked up the Magnetic Coil Kit.";
		tag "\cdMagnetic Coil Kit";
	}

	States
	{
		Spawn:
		SNRB J 6;
		SNRB J 6 Bright;
		loop;
	}

	override void SetupItems()
	{
		AddWeapon("RLHyperBlasterPickup", 0);
		AddWeapon("RLLaserShotgunPickup", 1);

		newitem = "RLRailgunPickup";

		newitemname = "\cdRailgun";
		usemsg = "Press Use again to combine a nearby \cvHyperblaster\c- and \cvLaser Shotgun\c- to craft a \cdRailgun\c-.";
		
		unlockslot = 3;
	}
}

class DRLAX_QuantumEngineKit : DRLAX_WeaponKitBase
{
	Default
	{
		Inventory.Icon "LAXITE16";
		Inventory.PickupMessage "You picked up the Quantum Engine Kit.";
		tag "\cdQuantum Engine Kit";
	}

	States
	{
		Spawn:
		SNRB L 6;
		SNRB L 6 Bright;
		loop;
	}

	override void SetupItems()
	{
		AddWeapon("RLHighPowerTristarBlasterPickup", 0);
		AddWeapon("RLVBFG9000Pickup", 1);
		AddWeapon("RLNuclearVBFG9000Pickup", 1);

		newitem = "RLBFG10KPickup";

		newitemname = "\cdBFG10K";
		usemsg = "Press Use again to combine a nearby \cvVBFG9000\c- and \cvHigh Power Tristar Blaster\c- to craft a \cdBFG10K\c-.";

		unlockslot = 4;
	}
}

class DRLAX_LegendaryIdol : DRLAX_BaseInventory
{
	Default
	{
		Inventory.Icon "LAXITE17";
		inventory.maxamount 1;
		Inventory.InterhubAmount 1;
		inventory.pickupsound "familiars/familiarballup";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up the \cfLegendary Idol\c-.";
		//species "Player";
		DeathSound "boots/dropmetal";
		tag "\cfLegendary Idol";
		Scale 0.15;
	}

	uint maxblood;
	uint bleeds;

	States
	{
		Spawn:
		CAWA A 5 Bright A_SpawnItemEx("RLCacowardSparkle",frandom(-5,5),frandom(-5,5),frandom(3,12), 0,0,0, 0, SXF_NOCHECKPOSITION);
		loop;
	}

	override String PickupMessage()
	{
		return "Picked up the " .. GetTag();
	}

	override void UseMessage()
	{
		owner.A_Print("Holding this item increases the chance of encountering a \cfLegendary\c- weapon.\n\nPress \caDrop Item (DRLA)\c- to drop it, or switch weapons to cancel.", 8.0);
	}

	override void UseFunction()
	{
		
	}

	override void DropMessage()
	{
		owner.A_Print("You dropped the " .. GetTag());
	}

	override void PressedDrop()
	{
		bool spawned;
		Actor act;
		[spawned, act] = owner.A_SpawnItemEx(GetClass(),0,0,32,9);
		if(act && spawned)
		{
			let d = DRLAX_LegendaryIdol(act);
			if(d)
			{
				d.maxblood = maxblood;
			}
		}
	}

	override void Tick()
	{
		if(Level.MapName != "OUTPOST" && Level.MapName != "VR" && Level.MapName != "HUBMAP" && level.Time == 5)
		{
			if(owner && owner.health > 0)
			{
				bleeds++;
				
				if(bleeds == maxblood)
				{
					String legendaryweps[] = 
					{
						"RLJudgeOfTheDeadWorldSpawnPickup",
						"RLHurricaneCannonWorldSpawnPickup",
						"RLNeuralStunnerWorldSpawnPickup",
						"RLBaronBlasterWorldSpawnPickup",
						"RLRealityDistortionArrayWorldSpawnPickup",
						"RLBFGInfinityWorldSpawnPickup",
						"RLDuke2RifleWorldSpawnPickup",
						"RLLonghornWorldSpawnPickup"
					};
					CMMSS_Actor_SafeSpawner ss = CMMSS_SafeSpawner.New("DRPGWeaponLegendarySpawner", 1, "", 32, 32, 0, CMMSS_SafeSpawner.SSFLAGS_NOMONSTERS);
					
					//DetachFromOwner();
					//Destroy();
					Super.Tick();
					return;
				}
			}
		}
		Super.Tick();
	}


	override void PostBeginPlay()
	{
		if(maxblood == 0)
		{
			maxblood = random(3, 6);
		}
	}

}
