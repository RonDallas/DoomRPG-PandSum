class DRLAX_SpiderbotFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        attacksound "weapons/widowmakerspidernom";
        damagetype "Melee";
        species "Player";
    }

    bool diving;

    states
    {
        Spawn:
        WSPI ABCB 4 FamiliarIdle();
        loop;
        Missile:
        WSPI E 0 
        {
            diving = true;
            A_FaceTracer(0, 0);
            A_StartSound(attacksound, volume:GetVolume());
            Vel3DFromAngle(30, angle, pitch);
        }
		WSPI E 10; //A_SpawnProjectile("DRLAX_ImpFamiliarBall", 8, ptr:AAPTR_TRACER); //A_TroopAttack;
        WSPI E 8 A_Explode(BiteDamage(), 64, 0, 0, BiteDamage());
        WSPI A 3 
        {
            A_FaceTracer(0, 0);
            A_StartSound(attacksound, volume:GetVolume());
            Vel3DFromAngle(30, angle, pitch);
        }
		WSPI E 10; //A_SpawnProjectile("DRLAX_ImpFamiliarBall", 8, ptr:AAPTR_TRACER); //A_TroopAttack;
        WSPI E 8 A_Explode(BiteDamage(), 64, 0, 0, BiteDamage());
        WSPI C 3
        {
            diving = false;
        }
		Goto Spawn;
    }

    virtual uint BiteDamage()
    {
        return random(32, 48);
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 3) == 0 && Distance2D(tracer) < 200)
        {
            SetStateLabel("Missile");
            attackcooldown = random(1, 5);
        }
    }

    override void FamiliarTick()
    {
        if(!diving)
        {
            MoveToPlatform();
        }
        else
        {
            A_ScaleVelocity(0.70);
        }
    }

    override void FamiliarStart()
    {
        GiveStackingPassive("DRLAX_SpiderbotFamiliarPassive", true);
    }

    override void FamiliarEnd()
    {
        GiveStackingPassive("DRLAX_SpiderbotFamiliarPassive", false);
    }

}

class DRLAX_SpiderbotFamiliarPassive : DRLAX_FamiliarPassive
{
}

class DRLAX_DarkMartyFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "darkmarty/sight";
        attacksound "weapons/handcannon";
        +BRIGHT;
    }
    int extradamage;
    states
    {
        Spawn:
        XMRT ABCD 6 FamiliarIdle();
        loop;
        Missile:
        XMRT E 4 A_FaceTracer(0, 0);
        XMRT F 0 A_StartSound(attacksound, volume:GetVolume());
		XMRT F 6 FamiliarLineAttack(angle, pitch, random(4,8) + extradamage, "Bullet", "RLBulletPuff", 0);//A_CustomBulletAttack(22.5, 0, 1, random(1,5)*3, "RLBulletPuff", 0, CBAF_NORANDOM);
        XMRT E 8 A_FaceTracer;
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 2) == 0)
        {
            SetStateLabel("Missile");
            attackcooldown = random(10, 100);
        }
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }

    override void FamiliarStart()
    {
        DRLAX_DarkMartyFamiliarPassive f = DRLAX_DarkMartyFamiliarPassive(playeractor.FindInventory("DRLAX_DarkMartyFamiliarPassive"));
        if(!f)
        {
            playeractor.GiveInventory("DRLAX_DarkMartyFamiliarPassive", 1);
            FamiliarStart();
            return;
        }

        //This should run when the familiar is initially summoned, so that map completion can be recorded
        if(Level.MapName == "OUTPOST")
        {
            //If we're entering the outpost, then the previous level wasn't completed
            f.validMap = false;
            f.treeCount = 0;
        }
        else
        {
            if(f.validMap)
            {
                //The last map was completed successfully
                f.dmg += 5 + (10 * f.treeCount);
            }
            f.validMap = true;
            f.treeCount = 0;
            
            ThinkerIterator ti = ThinkerIterator.Create("Actor");
            Actor a;
	        class<actor> BigTree = GetReplacement("BigTree");
            class<actor> TorchTree = GetReplacement("TorchTree");
            class<actor> Stalagtite = GetReplacement("Stalagtite");
            while(a = Actor(ti.Next()))
            {
                if(f.treeCount == 12)
                {
                    break;
                }

                if(a is BigTree || a is TorchTree || a is Stalagtite)
                {
                    f.treeCount++;
                }
            }
        }
        extradamage = f.dmg;
    }
}

class DRLAX_DarkMartyFamiliarPassive : Inventory
{
    uint dmg;
    uint treeCount;
    bool validMap;
}


class DRLAX_CommanderKeenFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "weapons/neuralstunnerpickup";
        +BRIGHT;
        radius 1;
    }

    states
    {
        Spawn:
        KEE0 ABCD 6 FamiliarIdle();
        loop;
        Missile:
        KEE0 E 1 A_FaceTracer;
		KEE0 E 6 A_SpawnProjectile("DRLAX_CommanderKeenFamiliarStun", 2, ptr:AAPTR_TRACER);
        KEE0 E 8 A_FaceTracer; //A_TroopAttack;
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 1) == 0 && tracer.CountInv("DRLAX_CommanderKeenFamiliarStunned") == 0)
        {
            SetStateLabel("Missile");
            attackcooldown = 400;
        }
    }

    override void FamiliarStart()
    {
        GiveStackingPassive("DRLAX_CommanderKeenFamiliarPassive", true);
    }

    override void FamiliarEnd()
    {
        GiveStackingPassive("DRLAX_CommanderKeenFamiliarPassive", false);
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }
}

class DRLAX_CommanderKeenFamiliarStunned : Powerup
{
    Default
    {
        powerup.duration 210;
    }
}

class DRLAX_CommanderKeenFamiliarStun : DRLAX_FamiliarProjectile
{
    Default
    {
        SeeSound "weapons/neuralstunner";
        DeathSound "weapons/neuralstunnerhit";
        scale 0.5;
        speed 25;
        damage (10);
    }

    Actor hitactor;

    States
    {
        Spawn:
        STNB ABCD 2 Bright;
        Loop;
        Death:
        STNB DE 6 Bright;
        TNT1 A 210;
        stop;
    }

    override int SpecialMissileHit(Actor victim)
    {
        if(victim && victim.health > 0 && victim.bISMONSTER)
        {
            hitactor = victim;
            hitactor.GiveInventory("DRLAX_CommanderKeenFamiliarStunned", 1);
        }

        return Super.SpecialMissileHit(victim);
    }

    override void Tick()
    {
        if(hitactor && GetAge() % 3 == 0)
        {
            if(hitactor.bBOSS && random(0, 5) != 0)
            {
                Super.Tick();
                return;
            }

            hitactor.TriggerPainChance ("Normal", true); 
        }
        Super.Tick();
    }
}

class DRLAX_CommanderKeenFamiliarPassive : DRLAX_FamiliarPassive
{
    override void Tick()
    {
        if(owner.vel.z < 0)
        {
            for(int i; i<8; i++)
            {
                if(JumpAttack(45 * i))
                {
                    break;
                }
            }
        }
        Super.Tick();
    }

    bool JumpAttack(int ang)
    {
        FLineTraceData RemoteRay;
            bool hit = owner.LineTrace(
            ang,
            21,
            0,
            offsetz: -8,
            data: RemoteRay
            );

            if (hit && RemoteRay.HitType == TRACE_HitActor)
            {
                Actor a = RemoteRay.HitActor;
                if(a.bSHOOTABLE)
                {
                    int dmg = (random(4, 6) * 8) * (power + 1);

                    if(owner.CountInv("PowerStrength") > 0)
                    {
                        dmg = dmg * 10;
                    }
                    a.DamageMobj(owner, owner, dmg, "Melee", DMG_PLAYERATTACK|DMG_THRUSTLESS);
                    a.A_ChangeVelocity(0, 0, -8, CVF_RELATIVE);
                    owner.A_ChangeVelocity(owner.vel.x, owner.vel.y, 10, CVF_REPLACE);
                    owner.TakeInventory("RLStamina", 5);
                    owner.A_StartSound("weapons/kickhit");
                }

                return true;
            }

        return false;
    }
}

class DRLAX_RomeroFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "brain/sight";
        scale 0.15;
    }

    states
    {
        Spawn:
        BBRN A 15 FamiliarIdle();
        loop;
        Missile:
        BBRN B 50 A_Quake(5, 50, 0, 100, "");
        BBRN A -1;
		Goto Spawn;
    }

    override void FamiliarAction()
    {
    }

    uint seed;

    override void FamiliarTick()
    {
        if(seed == 0)
        {
            seed = random(0, 4);
        }

        if(Level.Time == 35*2)
        {
            if(playeractor && playeractor.health > 0)
            {
                if(playeractor.health > 200)
                {
                    String item;
                    switch(seed)
                    {
                        Case 0: item = "RLNanoModItem"; break;
                        Case 1: item = "RLFirestormModItem"; break;
                        Case 2: item = "RLSniperModItem"; break;
                        Case 3: item = "RLOnyxModItem"; break;
                        Case 4: item = "RLUniqueItemSpawner"; break;                        
                    }
                    A_SpawnItemEx(item, 0, 0, 0, 0, 0, 3);
                }
                SetStateLabel("Missile");
                A_StartSound("brain/spit", CHAN_VOICE, volume:GetVolume());
                playeractor.health = 666;
                playeractor.player.health = 666;
            }
        }
        MoveToPlatform();
    }
}

class DRLAX_TyphonFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        damagetype "Melee";
        species "Player";
    }

    bool diving;
    uint throwtics;
    Actor pickedactor;

    states
    {
        Spawn:
        TYPH ABCD 8 FamiliarIdle();
        loop;
        Missile: 
        TYPH D 0 
        {
            if(tracer)
            {
                pickedactor = tracer;
            }

            if(playeractor && plat)
            {
                plat.Warp(playeractor, -8, 0, 32, flags:WARPF_NOCHECKPOSITION);
                SetOrigin(plat.pos, false);
            }
            diving = true;
            A_FaceTracer(0, 0);
            Vel3DFromAngle(20, angle, pitch);
            throwtics = 0;
            pickedactor.TriggerPainChance ("Normal", true); 
        }
        TYPH DDDDDDDDDDDDDDDDDDDDDDD 1
        {
            throwtics++;
            if(pickedactor)
            {
                pickedactor.SetOrigin(Vec3Lerp(pickedactor.pos, pos + (0, 0, 30), throwtics * 0.03), true);
            }
            A_Face(playeractor);
            angle += 180;
        }
        TYPH D 35
        {
            A_StartSound("familiars/typhonthrow", volume:GetVolume());
            bool spawned;
            Actor act;
			[spawned, act] = A_SpawnItemEx("DRLAX_TyphonFamiliarThrow", 0, 0, 0, 50, 0, 0, flags:SXF_NOCHECKPOSITION);
            if(spawned && act)
            {
                act.target = playeractor;
                act.tracer = pickedactor;
            }

        }
        TYPH D 1
        {
            diving = false;
        }
		Goto Spawn;
    }

    vector3 Vec3Lerp(vector3 a, vector3 b, double t)
    {	
		if(t < 0){t = 0;}
		else if (t > 1.0)
		{
			t = 1.0;
		}

        return (a.x + (b.x - a.x) * t,
                a.y + (b.y - a.y) * t,
                a.z + (b.z - a.z) * t);
    }

    virtual uint BiteDamage()
    {
        return random(64, 128);
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 3) == 0 && playeractor.Distance2D(tracer) < 200)
        {
            if(A_SetSize(tracer.radius, tracer.height, true))
            {
                SetStateLabel("Missile");

                attackcooldown = random(50, 100);
            }
            A_SetSize(default.radius, default.height, false);
        }
    }

    override void FamiliarTick()
    {
        if(GetAge() == 5)
        {
            A_StartSound("familiars/typhonstart", volume:GetVolume());
        }

        if(!diving)
        {
            MoveToPlatform();
        }
        else
        {
            A_ScaleVelocity(0.70);
        }
    }

    override void FamiliarStart()
    {

    }

    override void FamiliarEnd()
    {
        
    }
}


class DRLAX_TyphonFamiliarThrow : Actor
{
    Default
    {
        Radius 8;
        Height 8;
        species "Player";
        +THRUACTORS;
        speed 20;
        PROJECTILE;
        -NOGRAVITY;
        gravity 0.25;
        +DONTBLAST;
        +DONTREFLECT;
        damagetype "Melee";
        attacksound "weapons/uppercutswing";
    }

    States
    {
        Spawn:
        TNT1 A 1
        {
            if(tracer)
            {
                if(!tracer.Warp(self, 0, 0, 0, 0, WARPF_COPYINTERPOLATION|WARPF_USECALLERANGLE|WARPF_COPYINTERPOLATION))
                {
                    SetStateLabel("Death");
                }
            }
        }
        loop;
        Death:
        TNT1 A 0
        {
            if(tracer && target)
            {
                tracer.DamageMobj(self, target, random(150, 200), "Melee", DMG_THRUSTLESS);
                tracer.A_ChangeVelocity(random(-5, 5), random(-5, 5), random(3, 5), CVF_RELATIVE);
                tracer.A_StartSound("familiars/typhonslam", volume:DRLAX_FamiliarBase.GetVolume());
            }
            A_Explode(100, 128, 0);
        }
        stop;
    }
}

class DRLAX_DogFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "stegglesbig/bark";
        attacksound "stegglesbig/attack";
        damagetype "Melee";
        species "Player";
    }

    bool diving;
    uint barking;

    states
    {
        Spawn:
        NDOG ABCD 4 FamiliarIdle();
        loop;
        Missile:
        NDOG I 0 
        {
            diving = true;
            A_FaceTracer(0, 0);
            A_StartSound(attacksound, volume:GetVolume());
            Vel3DFromAngle(30, angle, pitch);
        }
        NDOG I 4; //A_FaceTracer;
		NDOG J 6 A_Explode(BiteDamage(), 64, 0, 0, BiteDamage()); //A_SpawnProjectile("DRLAX_ImpFamiliarBall", 8, ptr:AAPTR_TRACER); //A_TroopAttack;
        NDOG KI 6;
        NDOG D 0
        {
            diving = false;
        }
		Goto Spawn;
        Bark:
        NDOG K 0
        {
            barking = 35*3;
            A_StartSound("stegglesbig/bark", volume:GetVolume());
        }
        NDOG KJK 4;
        NDOG K 0
        {
            barking = 35*3;
            A_StartSound("stegglesbig/bark", volume:GetVolume());
        }
        NDOG KJ 4;
        NDOG K 10;
        NDOG CD 4;
        Goto Spawn;
    }

    virtual uint BiteDamage()
    {
        return random(64, 128);
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 3) == 0 && Distance2D(tracer) < 200)
        {
            SetStateLabel("Missile");
            attackcooldown = random(35, 35*3);
            return;
        }
    }

    bool CheckForSecrets()
    {
        for(int i; i<secrets.Size(); i++)
        {
            Vector2 spos = secrets[i].s.CenterSpot;

            if(((pos.x, pos.y) - spos).Length() < 300 && secrets[i].s.IsSecret())
            {
                SetStateLabel("Bark");
                Vector2 diff = level.Vec2Diff(pos.xy, (spos.x, spos.y));
                angle = atan2(diff.y, diff.x);
                return true;
            }
        }

        return false;
    }

    override void FamiliarStart()
    {
        GetSectors();
    }

    Array<DRLAX_Point> secrets;

    void GetSectors()
    {
        for(int i; i<level.sectors.Size(); i++)
        {
            if(level.sectors[i].IsSecret())
            {
                DRLAX_Point p = new ("DRLAX_Point");
                p.s = level.sectors[i];
                secrets.Push(p);
            }
        }
    }

    void CheckForMonsters()
    {
        BlockThingsIterator bti = BlockThingsIterator.Create(self, 300);

        while(bti.Next())
        {
            if(bti.thing && 
            bti.thing.health > 0 && 
            bti.thing.bISMONSTER && 
            !bti.thing.bFRIENDLY && 
            !bti.thing.target && 
            !bti.thing.lastheard &&
            Distance3D(bti.thing) < 300)
            {
                barking = random(35, 35*4);
                A_StartSound("stegglesbig/special", volume:GetVolume());
                A_Face(bti.thing);
                return;
            }
        }
    }

    override void FamiliarTick()
    {
        if(barking > 0)
        {
            barking--;
        }
        else
        {
            if(attackcooldown == 0 && (GetAge() % 35*3) == 0)
            {
                if(!CheckForSecrets())
                {
                    CheckForMonsters();
                }
                
            }
        }

        if(!diving)
        {
            MoveToPlatform();
            
        }
        else
        {
            A_ScaleVelocity(0.70);
        }
    }
}

class DRLAX_Point
{
    Sector s;
}

class DRLAX_BarrelFamiliar : DRLAX_FamiliarBase
{
    Actor b;

    states
    {
        Spawn:
        BAR1 AB 6 FamiliarIdle();
        loop;
    }

    override void FamiliarAction()
    {
    }


    override void FamiliarTick()
    {
        MoveToPlatform();

        if(b)
        {
            attackcooldown = 35*3;
        }

        if(playeractor.player.buttons & BT_ALTATTACK && attackcooldown == 0)
        {
            b = Spawn("DRLAX_FamiliarBarrel", pos);
            b.target = self;
            //b.A_StartSound("misc/teleport");
        }
    }
}

Class DRLAX_FamiliarBarrel : Actor
{
    Default
    {
        +NOINTERACTION;
        +NOGRAVITY;
    }

    states
    {
        Spawn:
        TNT1 A 0;
        TNT1 A 0 A_SpawnItemEx("TeleportFog", flags:SXF_NOCHECKPOSITION);
        TNT1 AAAAA 4 A_SpawnItemEx("RLDemonicBossTeleportFogSpark", 0,0,32, frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0), 0, SXF_NOCHECKPOSITION);
        TNT1 A 0
        {
            String barrels[] = 
            {
                "RLExplosiveBarrel",
                "RLAcidBarrel",
                "RLNapalmBarrel",
                "RLTechBarrel"
            };

            DRLAX_BarrelFamiliar f = DRLAX_BarrelFamiliar(target);

            if(f)
            {
                f.b = Spawn(barrels[random(0, barrels.Size() - 1)], pos);
            }
        }
        stop;
    }
}

class DRLAX_DukeNukemFamiliar : DRLAX_FamiliarBase
{
    states
    {
        Spawn:
        DUKE ABCD 8 FamiliarIdle();
        loop;
        Missile:
        DUKE E 4 Bright A_FaceTracer (0,0);
        DUKE F 8 Bright 
        {
            A_FaceTracer(0,0);
            A_SpawnProjectile("DRLAX_DukeFamiliarRocket", 8, ptr:AAPTR_TRACER);
        }
        DUKE E 4;
        Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 1) == 0)
        {
            SetStateLabel("Missile");
            attackcooldown = random(300, 400);
        }
    }

    override void FamiliarStart()
    {
        A_StartSound("familiars/dukeintro");
        playeractor.GiveInventory("DRLAX_DukeFamiliarPassive", 1);
    }

    override void FamiliarEnd()
    {
        playeractor.TakeInventory("DRLAX_DukeFamiliarPassive", 1);
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }
}

class DRLAX_DukeFamiliarPassive : Inventory
{
    Default
    {
        inventory.maxamount 6;
    }

    uint cd;

    void Trigger()
    {
        if(cd == 0)
        {
            owner.A_StartSound("familiars/duketalk");
            cd = 35*20;
        }
    }

    override void Tick()
    {
        if(cd > 0)
        {
            cd--;
        }
        Super.Tick();
    }
}

class DRLAX_DukePassiveExplosion : Actor
{
    Default
    {
        +MISSILE;
        +NOINTERACTION;
    }

    states
    {
        Spawn:
        TNT1 A 4;
        TNT1 A 0
        {
            A_SetScale (2.5);
            A_SetTranslucent (0.95, 1);
            A_Explode (256,256,0);
            if(CallACS("DRLA_QuakeNShake") != 0)
            {
                A_Quake (1, 8, 0, 1024, "");
                A_Quake (6, 8, 0, 512, "");
            }
            A_PlaySound ("weapons/missileexplosion", 7, 1, 0, 0.5);
            A_PlaySound("weapons/missileexplosion", CHAN_ITEM, 0.05, 0, 0.05);
        }
        MEXP AAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("RLRocketShrapnel", 0, 0, 0, frandom(-5.0,5.0), frandom(-5.0,5.0), frandom(-5.0,5.0), frandom(0.0,360.0),0,58);
        MEXP AAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("RLBulletPuffShrapnel", 0, 0, 0, frandom(-5.0,5.0), frandom(-5.0,5.0), frandom(-5.0,5.0), frandom(0.0,360.0),0,58);
        MEXP A 1 Bright;
        MEXP B 1 Bright;
        MEXP B 0 A_SpawnItemEx("RLMissilePuff");
        MEXP C 2 Bright;
        MEXP D 2 Bright;
        MEXP E 3 Bright;
        MEXP F 4 Bright;
        Stop;
    }
}

class DRLAX_DukeFamiliarRocket : DRLAX_FamiliarProjectile
{
    Default
    {
        PROJECTILE;
        Speed 15;
        Damage 20;
        Damagetype "Fire";
        PainType "Explosion";
        DeathType "Explosion";
        Scale 0.4;
        radius 8;
        height 6;
        Species "Player";
        +THRUSPECIES;
        +THRUGHOST;
        +FORCEXYBILLBOARD;
        Decal "Scorch";
        SeeSound "weapons/missilelauncher";
        DeathSound "";
    }

    States
	{
		Spawn:
		MNSS A 1 Bright A_SpawnItemEx("RLMissileTrail",0,0,0);
		loop;
        Death:
		TNT1 A 0
        {
            A_SetScale (1.25);
            A_SetTranslucent (0.95, 1);
            A_Explode (256,160,0);
            if(CallACS("DRLA_QuakeNShake") != 0)
            {
                A_Quake (1, 8, 0, 1024, "");
                A_Quake (6, 8, 0, 512, "");
            }
            A_PlaySound ("weapons/missileexplosion", 7, 1, 0, 0.5);
            A_PlaySound("weapons/missileexplosion", CHAN_ITEM, 0.05, 0, 0.05);
        }
        MEXP AAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("RLRocketShrapnel", 0, 0, 0, frandom(-5.0,5.0), frandom(-5.0,5.0), frandom(-5.0,5.0), frandom(0.0,360.0),0,58);
        MEXP AAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("RLBulletPuffShrapnel", 0, 0, 0, frandom(-5.0,5.0), frandom(-5.0,5.0), frandom(-5.0,5.0), frandom(0.0,360.0),0,58);
        MEXP A 1 Bright;
        MEXP B 1 Bright;
        MEXP B 0 A_SpawnItemEx("RLMissilePuff");
        MEXP C 2 Bright;
        MEXP D 2 Bright;
        MEXP E 3 Bright;
        MEXP F 4 Bright;
        Stop;
	}
}


class DRLAX_SecurityOfficerFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        attacksound "marathon/assaultrifle";
        scale 0.13;
    }

    bool guarding;

    states
    {
        Spawn:
        M1SO ABCD 8 FamiliarIdle();
        loop;
        Missile:
        ReMissile:
        M1SO FE 3 BRIGHT 
        {
            A_FaceTracer(0,0);
            A_StartSound(attacksound, volume:GetVolume());

            FamiliarLineAttack(angle + frandom(-12.5, 12.5), pitch + frandom(-0.5, 0.5), random(9,15), "Bullet", "RLMarathonPuff", true);
            //A_SpawnProjectile("DRLAX_ArachnotronFamiliarBall", 8, ptr:AAPTR_TRACER);
        }
		M1SO F 1
        {
            if(attackcooldown >= 400)
            {
                return;
            }

            if(tracer && tracer.health > 0 && CheckSight(tracer))
            {
                SetStateLabel("ReMissile");
                attackcooldown += 10;
                return;
            }
        }
		Goto Spawn;
    }

    Actor mapmark;

    override void OnDestroy()
    {
        if(mapmark)
        {
            mapmark.Destroy();
        }
        Super.OnDestroy();
    }

    override void FamiliarUsed()
    {
        guarding = !guarding;
        if(guarding)
        {
            mapmark = Spawn("DRLAX_SecurityOfficerMapMarker", pos);
            playeractor.A_Print("Security Officer set to \cdGuard Mode\c-.", 3.0, "CONFONT");
        }
        else
        {
            playeractor.A_Print("Security Officer set to \cnFollow Mode\c-.", 3.0, "CONFONT");

            if(mapmark)
            {
                mapmark.Destroy();
            }
        }

        playeractor.A_StartSound("familiars/marathonstance", CHAN_6, CHANF_UI|CHANF_LOCAL);
    }

    override void FamiliarAction()
    {
        if(attackcooldown < 150 && random(0, 3) == 0)
        {
            SetStateLabel("Missile");
        }
    }

    override void FamiliarTick()
    {
        hideplatform = guarding;

        if(guarding)
        {
            if(!tracer)
            {
                FindNewTracer();
            }

            if(GetAge() % 2 == 0)
            {
                A_SpawnItemEx("DRLAX_SecurityOfficerWatchFX", 20, 0, -14, 0, 0, 0, GetAge() * 4, SXF_ABSOLUTEANGLE|SXF_NOCHECKPOSITION);
            }
        }
        else
        {
            MoveToPlatform();
        }
    }
}

class DRLAX_SecurityOfficerWatchFX : RLPhaseSistersTeleportMicroFX
{
    Default
    {
        Translation "";
        scale 0.5;
    }
}


class DRLAX_SecurityOfficerMapMarker : MapMarker
{
    Default
    {
        +NOINTERACTION;
        -SOLID;
        translation "CMMDRLA_Familiar";
        scale 0.15;
    }

    states
    {
        Spawn:
        M1SO F -1;
        stop;
    }
}

class DRLAX_DevilFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "familiars/devil";
        attacksound "weapons/flamethrowerimpact";
    }

    states
    {
        Spawn:
        HIMP ABCB 8 FamiliarIdle();
        loop;
        Missile:
        HIMP DE 4 A_FaceTracer;
		HIMP F 6 
        {
            A_FaceTracer();
            A_SpawnProjectile("DRLAX_DevilFamiliarBall", 10, ptr:AAPTR_TRACER);
            A_StartSound(attacksound, volume:GetVolume());
        }
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 1) == 0)
        {
            SetStateLabel("Missile");
            attackcooldown = random(3, 5) * 35;
        }
    }

    override void FamiliarStart()
    {
        GiveStackingPassive("DRLAX_DevilFamiliarPassive", true);
    }

    override void FamiliarEnd()
    {
        GiveStackingPassive("DRLAX_DevilFamiliarPassive", false);
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }
}

class DRLAX_DevilFamiliarPassive : DRLAX_FamiliarPassive
{
}

class DRLAX_DevilFamiliarBall : Actor
{
    Default
    {
        Radius 6;
        Height 7;
        species "Player";
        scale 0.35;
        PROJECTILE;
        +PAINLESS;
        +DONTREFLECT;
        +MTHRUSPECIES;

        Radius 8;
        Height 11;
        Speed 60;
        Damage (8);
        RenderStyle "STYLE_ADD";
        DamageType "Fire";
        -NOGRAVITY;
        Gravity 0.9;
        Alpha 0.95;
        +THRUGHOST;
        +FORCEXYBILLBOARD;
        Decal "RevenantScorch";
        DeathSound "weapons/flare";
    }

    States
    {
        Spawn:
        TNT1 A 1 Bright 
        {
            A_SpawnItemEx("RLNapalmFX", 0, 0, 0, 0, 0, 0, 0, 128);
            //Console.Printf("" .. bNOGRAVITY .. " - " .. gravity);
        }
        Loop;
        Death:
        FRFX HIJ 2 Bright;
        FRFX J 0 A_Explode(6, 64, 0);
        FRFX J 0 
        {
            Actor a = Spawn("DRLAX_DevilFamiliarFire", pos + (vel.x, vel.y, 0));
        }
        FRFX KLMNO 2 Bright;
        Stop;
    }

    override void PostBeginPlay()
    {
        A_ChangeVelocity(0, 0, 3.0, CVF_RELATIVE);
    }
}

Class DRLAX_DevilFamiliarFire : DRLAX_FamiliarProjectile
{
    Default
    {
        Radius 8;
        Height 40;
        Projectile;
        RenderStyle "STYLE_ADD";
        DamageType "Fire";
        Alpha 0.90;
        Scale 0.6;
        -NOGRAVITY;
        +LOWGRAVITY;
        +NOEXPLODEFLOOR;
        +NODAMAGETHRUST;
        +MOVEWITHSECTOR;
        +THRUGHOST;
        +DONTSPLASH;
        reactiontime 20;
        -PAINLESS;
    }

    States
    {
        Spawn:
        TNT1 A 0;
        TNT1 A 0 A_Warp (AAPTR_DEFAULT, 0, 0, 0, 0, WARPF_NOCHECKPOSITION | WARPF_TOFLOOR);
        SpawnLoop:
        TNT1 A 0 A_CountDown();
        TNT1 A 0 A_Playsound("weapons/fireloop");
        TNT1 A 0 A_Explode(3, 32, 0, 0, 16);
        FLME ABCDEFGHIJKLMN 2 Bright A_Explode(randompick(0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,3,5), 16, 0, 0, 16);
        Loop;
        Death:
        FLME ABCDEFGH 2 Bright A_SetScale(scalex*0.8);
        Stop;
    }

    override int DoSpecialDamage(Actor target, int damage, name damagetype)
    {
        if(target && target.player)
        {
            return 0;
        }

        return damage;
    }
}

class DRLAX_YhollWeaponHolder : Thinker
{
    uint player;
    Array<DRLAX_YhollCarriedWep> weps;

    override void PostBeginPlay()
    {
        //levelname = level.levelname;
        ChangeStatNum(STAT_STATIC);
    }

    static DRLAX_YhollWeaponHolder Get(uint player)
    {
        ThinkerIterator i = ThinkerIterator.Create("DRLAX_YhollWeaponHolder", Thinker.STAT_STATIC);
		DRLAX_YhollWeaponHolder u;

		while(u = DRLAX_YhollWeaponHolder(i.Next()))
		{
			if(player == u.player)
            {
                return u;
            }
        }

        u = new ("DRLAX_YhollWeaponHolder");
        u.player = player;
        return u;
    }
}


class DRLAX_YhollFamiliar : DRLAX_FamiliarBase
{
    Array<DRLAX_YhollCarriedWep> weps;

    Default
    {
        seesound "bird/bird";
    }

    states
    {
        Spawn:
        YUUK D 1 FamiliarIdle();
        loop;
    }

    override void FamiliarUsed()
    {
        if(weps.Size() > 0)
        {
            //A_StartSound("bird/tweet", volume:GetVolume());
            for(int i; i<weps.Size(); i++)
            {
                let a = Spawn(weps[i].weapon, pos);

                a.gravity = 0.5;
                a.A_ChangeVelocity(frandom(-3, 3), frandom(-3, 3), frandom(3, 6 + (weps.Size() * 0.25)));

                for(int p = 0; p<weps[i].mods.Size(); p++)
                {
                    a.GiveInventory(weps[i].mods[p], 1);
                }
            }

            weps.Clear();
        }
        else
        {
            A_StartSound("bird/tweet");
        }
    }

    override void FamiliarStart()
    {
        //Console.Printf(playeractor.PlayerNumber() .. "");
        DRLAX_YhollWeaponHolder h = DRLAX_YhollWeaponHolder.Get(playeractor.PlayerNumber());
        
        if(h)
        {
            weps.Copy(h.weps);
        }

        for(int i; i<weps.Size(); i++)
        {
            SpawnWeaponFX(weps[i], i);
        }
    }

    override void FamiliarEnd()
    {
        //Console.Printf(playeractor.PlayerNumber() .. "");
        DRLAX_YhollWeaponHolder h = DRLAX_YhollWeaponHolder.Get(playeractor.PlayerNumber());
        
        if(h)
        {
            h.weps.Copy(weps);
        }
    }

    override void FamiliarAction()
    {
    }

    override void FamiliarTick()
    {
        if(random(0, 60) == 0)
        {
            idletimer = 8;
        }
        else
        {
            idletimer = 0;
        }
        
        MoveToPlatform();

        if(Distance2D(playeractor) > 128)
        {
            return;
        }

        let inv = FindDroppedWeapon();

        if(inv)
        {
            if(weps.Size() == 99)
            {
                Spawn("RLNuke", pos);
                weps.Clear();
                return;
            }

            DRLAX_YhollCarriedWep y = DRLAX_YhollCarriedWep(new("DRLAX_YhollCarriedWep"));

            y.sprite = inv.sprite;
            y.frame = inv.frame;
            y.weapon = inv.GetClass();

            ThinkerIterator ti = ThinkerIterator.Create("Inventory");
            Inventory a;

            while(a = Inventory(ti.Next()))
            {
                if(a.owner && a.owner == inv)
                {
                    for(int i = 0; i<inv.CountInv(a.GetClass()); i++)
                    {
                        y.mods.Push(a.GetClass());
                    }
                }
            }

            weps.Push(y);
            A_StartSound("armor/equip1");
            SpawnWeaponFX(y, weps.Size());
        
            inv.Destroy();
        }
    }

    void SpawnWeaponFX(DRLAX_YhollCarriedWep w, int slot)
    {
        DRLAX_YhollCarriedWeaponFX fx = DRLAX_YhollCarriedWeaponFX(Spawn("DRLAX_YhollCarriedWeaponFX", pos));

        fx.sprite = w.sprite;
        fx.frame = w.frame;
        fx.zoff = slot * 3;
        fx.target = self;
    }

    CustomInventory FindDroppedWeapon()
	{
		BlockThingsIterator bti = BlockThingsIterator.Create(self, 40);

        while(bti.Next())
        {
            CustomInventory b = CustomInventory(bti.thing);
			String dropped = "RLBaseWeaponPickup";

			if(b && b is dropped && b.GetAge() > 3 && Distance3D(b) < 40 && b.master && b.vel.z != 0)
			{
                return b;
			}
		}

        return null;
	}
}

Class DRLAX_YhollCarriedWeaponFX : Actor
{
    Default
    {
        +NOINTERACTION;
        +NOGRAVITY;
        +ROLLSPRITE;
        //+ROLLCENTER;
        scale 0.25;
    }

    int zoff;
    DRLAX_YhollFamiliar yholl;

    states
    {
        Spawn:
        "####" "#" -1;
        loop;
    }

    override void Tick()
    {
        if(yholl && yholl.weps.Size() > 0)
        {
            Warp(target, 0, 0, zoff + 5.5, flags:WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION);
        }
        else
        {
            Destroy();
            return;
        }
        Super.Tick();
    }

    override void PostBeginPlay()
    {
        yholl = DRLAX_YhollFamiliar(target);
        roll = frandom(-16, 16);
    }
}

Class DRLAX_YhollCarriedWep
{
    SpriteID sprite;
    int frame;

    Class<Actor> weapon;
    Array<Class<Inventory> > mods;
}