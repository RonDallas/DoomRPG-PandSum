class RLTrespasserStartingLoadout : CustomInventory
{
	states
	{
		Pickup:
		TNT1 A 0 A_GiveInventory("DRLAX_TrespasserScanner", 1);
		TNT1 A 0 A_GiveInventory("DRLAX_ShavedArms", 1);
		TNT1 A 0 A_GiveInventory("DRLAX_TrespasserScatterShot", 1);
		stop;
	}
}

Class RLTrespasserEvents : EventHandler
{
	override void RenderOverlay (RenderEvent event)
    {
        if(automapactive || !Cvar.GetCvar("drpg_drla_hud_on", players[consoleplayer]).GetBool())
        {
            return;
        }
        
        let s = DRLAX_TrespasserSmokeBombCooldown(players[consoleplayer].mo.FindInventory("DRLAX_TrespasserSmokeBombCooldown"));

        if(s)
        {
			int X = CVar.GetCVar("drpg_drla_x", players[consoleplayer]).GetInt();
			int Y = CVar.GetCVar("drpg_drla_y", players[consoleplayer]).GetInt();   
			int XOff = - 120, YOff = - 10;	

            if(Screen.GetAspectRatio() < 1.3)
            {
                XOff = - 259;
                YOff = + 5;
            }
            else if(Screen.GetAspectRatio() < 1.4)
            {
                XOff = - 228;
                YOff = - 10;
            }
            else if(Screen.GetAspectRatio() < 1.7)
            {
                XOff = - 163;
                YOff = - 10;
            }
            else if(Screen.GetAspectRatio() < 1.8)
            {
                XOff = - 120;
                YOff = - 10;
            }			
            else if(Screen.GetAspectRatio() > 2.3)
            {
                XOff = + 22;
                YOff = - 10;
            }

            let window_aspect    = 1.0 * Screen.GetWidth() / Screen.GetHeight();
            let resolution        = 480 * (window_aspect, 1);
			double alpha;
			if(s.GetAge() < 55 * 35)
			{
				alpha = 0.25;
			}
			else
			{
				alpha = Max(0.1, Abs(cos(s.GetAge() * 4)) - 0.1);
			}
			//Console.Printf("" .. Abs(cos(s.GetAge() * 5)));

            Screen.DrawTexture(TexMan.CheckForTexture("TRSMKCD", TexMan.Type_Sprite, 0), false, X + XOff, Y + YOff,
			DTA_ALPHA, alpha,
            DTA_VIRTUALWIDTHF,    resolution.x,
            DTA_VIRTUALHEIGHTF,    resolution.y,
            DTA_KEEPRATIO, true, DTA_HUDRules);
        }
    }

	void SplinterShot(int damage, actor hitactor, actor playeractor, int angle, String damagetype)
	{
		if(hitactor)
		{
			for(int i=0; i<Min(damage*0.1, 20); i++)
			{
				FLineTraceData RemoteRay;
				bool hit = hitactor.LineTrace(
				angle + frandom(-20.0, 20.0),
				900,
				0,
				offsetz: frandom(- 8, hitactor.height + 8),
				data: RemoteRay
				);

				if (hit)
				{
					if(RemoteRay.HitType == TRACE_HitWall)
					{
						if(damagetype ~== "Bullet")
						{
							SpawnPuff("DRLAX_SplinterShot", RemoteRay.HitLocation, playeractor);
						}
						else if(damagetype ~== "Fire")
						{
							SpawnPuff("DRLAX_SplinterShotFire", RemoteRay.HitLocation, playeractor);
						}
						else if(damagetype ~== "Plasma")
						{
							SpawnPuff("DRLAX_SplinterShotPlasma", RemoteRay.HitLocation, playeractor);
						}
						else if(damagetype ~== "Unholy")
						{
							SpawnPuff("DRLAX_SplinterShotUnholy", RemoteRay.HitLocation, playeractor);
						}
						else if(damagetype ~== "Holy")
						{
							SpawnPuff("DRLAX_SplinterShotPlasma", RemoteRay.HitLocation, playeractor);
						}
						else
						{
							SpawnPuff("DRLAX_SplinterShot", RemoteRay.HitLocation, playeractor);
						}
					}
				}			
			}

			Array<Actor> hits;

			for(int h = 0; h<3; h++)
			{
				for(int i = 0; i<61; i++)
				{
					if(i%2 == 0)
					{
						continue;
					}

					FLineTraceData RemoteRay;
					bool hit = hitactor.LineTrace(
					(angle - 30) + i,
					900,
					0,
					offsetz: (hitactor.height * 0.5) * h,
					data: RemoteRay
					);

					//Actor.Spawn("HealthBonus", RemoteRay.HitLocation);

					if(RemoteRay.HitType == TRACE_HitActor)
					{
						Actor v = RemoteRay.HitActor;

						if(v && hits.Find(v) == hits.Size())
						{
							if(v.player && !deathmatch)
							{
								continue;
							}

							v.DamageMobj(hitactor, playeractor, damage * 0.7, damagetype, DMG_USEANGLE, angle);
							if(v.BloodType && !v.bNOBLOOD)
							{
								v.SpawnBlood(RemoteRay.HitLocation, angle, damage);
							}
							hits.Push(v);
						}
					}
				}
			}
		}
	}

	/* old splinter shot
	
	void SplinterShot(int damage, actor hitactor, actor playeractor, int angle, String damagetype)
	{
		if(hitactor)
		{
			for(int i; i<Max(1, Min(damage / 4, 256)); i++)
			{
				FLineTraceData RemoteRay;
				bool hit = hitactor.LineTrace(
				angle + frandom(-20.0, 20.0),
				3000,
				frandom(-6.0, 6.0),
				offsetz: hitactor.height * 0.5,
				data: RemoteRay
				);

				if (hit)
				{
					if(RemoteRay.HitType == TRACE_HitWall)
					{
						if(damagetype ~== "Bullet")
						{
							SpawnPuff("DRLAX_SplinterShot", RemoteRay.HitLocation, playeractor);
						}
						else if(damagetype ~== "Fire")
						{
							SpawnPuff("DRLAX_SplinterShotFire", RemoteRay.HitLocation, playeractor);
						}
						else if(damagetype ~== "Plasma")
						{
							SpawnPuff("DRLAX_SplinterShotPlasma", RemoteRay.HitLocation, playeractor);
						}
						else if(damagetype ~== "Unholy")
						{
							SpawnPuff("DRLAX_SplinterShotUnholy", RemoteRay.HitLocation, playeractor);
						}
						else if(damagetype ~== "Holy")
						{
							SpawnPuff("DRLAX_SplinterShotPlasma", RemoteRay.HitLocation, playeractor);
						}
						else
						{
							SpawnPuff("DRLAX_SplinterShot", RemoteRay.HitLocation, playeractor);
						}
					}

					if(RemoteRay.HitType == TRACE_HitActor)
					{
						Actor v = RemoteRay.HitActor;

						if(v)
						{
							v.DamageMobj(hitactor, playeractor, 6, damagetype, DMG_USEANGLE, angle);
							v.SpawnBlood(RemoteRay.HitLocation, angle, damage);
						}
					}
				}
			}
		}
	}
	*/

	void SpawnPuff(String puff, Vector3 pos, Actor source)
	{
		Vector3 newpos = pos - source.pos;
		newpos = pos - (newpos * 0.01);
		Actor.Spawn(puff, newpos);
	}

	static const String PlasmaPistolProj[] = 
		{
		"RLPlasmaPistolBall", 
		"RLPlasmaCombatPistolBall",
		"RLPlasmaMarksmanPistolBall",
		"RLPlasmaHandcannonBall",
		"RLPlasmaUziBall",
		"RLSuperchargedNuclearPlasmaPistolBall",
		"RLNuclearPlasmaRevolverBall",
		"RLNuclearPlasmaPistolBall",
		"RLBaronBlasterBall",
		"RLNeuralStunnerBlast"
		};
	
	static const String RocketPistolProj[] = 
		{
		"RLMiniMissile",
		"RLUnknownHeraldRocket",
		"RLJackalTracerBullet",
		"RLCasullTracerBullet"
		};

	static const String DemoPuff[]=
	{
		"RLDemoPistolPuff",
		"RLDemoCombatPistolPuff",
		"RLDemoMarksmanPistolPuff",
		"RLDemoHandcannonPuff",
		"RLDemoUziPuff"
	};

    override void WorldThingDied(WorldEvent e)
    {
        if(e.Thing && !e.Thing.player && e.Thing.bSHOOTABLE && e.Thing.bISMONSTER && e.Thing.target && e.inflictor && !e.Inflictor.bISMONSTER)
		{
            if(e.Thing.target is "DoomRLTrespasser" && e.Thing.target.CountInv("DRLAX_TrespasserSmokeBombCooldown") == 0)
            {
                if(e.Inflictor.damagetype == "Melee" || e.inflictor.GetClassName() == "RLEnergySawPuff")
                {
                    e.Thing.target.A_SpawnItemEx("DRLAX_SmokeBombActivate", flags:SXF_NOCHECKPOSITION);
					e.Thing.target.GiveInventory("DRLAX_TrespasserSmokeBombCooldown", 1);
                }
            }
        }

		if(e.Thing && e.Thing.GetClassName() == "RLSupplyCrate")
		{
			ThinkerIterator i = ThinkerIterator.Create("DRLAX_TrespasserScanner");
			DRLAX_TrespasserScanner inv;
			while(inv = DRLAX_TrespasserScanner(i.Next()))
			{
				if(inv.levels.Find(Level.LevelName) == inv.levels.Size())
				{
					if(random(0, 4) == 0)
					{
						inv.levels.Push(Level.LevelName);
						Actor a = Actor.Spawn(inv.armor, e.Thing.pos);
						if(a)
						{
							e.Thing.A_StartSound("items/newitemspawn", CHAN_6, attenuation:0.5);
							a.A_ChangeVelocity(random(-5, 5), random(-5, 5), random(5, 9));
						}
					}
				}
			}
		}
    }
	
	override void WorldThingDamaged (WorldEvent e)
	{
		if(e.Thing && !e.Thing.player && e.Thing.bSHOOTABLE && e.DamageSource)
		{
			Actor a = e.DamageSource;

            if(a.CountInv("DRLAX_TrespasserScatterShot") == 0)
            {
                return;
            }

			//Console.Printf("" .. a.GetCLassName());

			let p = players[a.PlayerNumber()];

			//Console.Printf(p.ReadyWeapon.GetClassName());

			if(e.inflictor && e.inflictor.GetClassName() == "DRLAX_TrespasserFamiliar")
			{
				SplinterShot(e.damage, e.Thing, a, e.inflictor.angle, "Bullet");
				return;
			}

            if(p && e.DamageFlags & DMG_PLAYERATTACK)
            {
                if(p.ReadyWeapon is "RLPistolWeapon")
                {
                    //Console.Printf("" .. e.damage);
                    SplinterShot(e.damage, e.Thing, a, e.DamageAngle, e.Damagetype);
					return;
                }

				if(p.ReadyWeapon is "RLDeathsGaze")
				{
					SplinterShot(e.damage, e.Thing, a, e.DamageAngle, "Unholy");
					return;
				}
            }


			//Console.Printf("" .. e.Inflictor.GetClassName());

			if(a.player && e.Inflictor)
			{
				for(int i = 0; i< PlasmaPistolProj.Size(); i++)
				{
					if(e.Inflictor is (PlasmaPistolProj[i]))
					{
						//Console.Printf("" .. e.damage);
						SplinterShot(e.damage, e.Thing, a, e.inflictor.angle, "Plasma");
						return;
					}
				}

				for(int i = 0; i< RocketPistolProj.Size(); i++)
				{
					if(e.Inflictor is (RocketPistolProj[i]))
					{
						//Console.Printf("" .. e.damage);
						SplinterShot(e.damage, e.Thing, a, e.inflictor.angle, "Fire");
						return;
					}
				}

				for(int i = 0; i< DemoPuff.Size(); i++)
				{
					if(e.Inflictor is (DemoPuff[i]))
					{
						//Console.PRintf("Thing = " ..  e.Thing.GetClassName() .. " inflictor = " .. e.inflictor.GetClassName() .. " - source = " .. a.GetClassName());
						SplinterShot(e.damage, e.Thing, a, e.inflictor.angle + 180, "Fire");
						return;
					}
				}
			}
		}
	}
}
/*
class testdummy : Cacodemon
{
	Default
	{
		health 9999999999;
		+NODAMAGETHRUST;
		mass 99999999999;
	}


	states
	{
		Pain:
		"####" "#" -1;
		stop;
	}
}
*/
class DRLAX_SplinterShot : Actor
{
	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		radius 2;
		height 2;
		scale 0.5;
		+BRIGHT;
		translation "CMMDRLA_Splinter";
		+ROLLSPRITE;
	}

	states
	{
		Spawn:
		TNT1 A 0;
		TNT1 A 0 A_SetTics(random(0, 3));
		TRSH ABC 3;
		TNT1 A 5;
		stop;
	}

	override void PostBeginPlay()
	{
		A_StartSound("trespasser/splinterhit");
		roll = random(0,360);
	}
}

class DRLAX_SplinterShotPlasma : DRLAX_SplinterShot
{
	Default
	{
		translation "CMMDRLA_SplinterPlasma";
	}
}

class DRLAX_SplinterShotFire : DRLAX_SplinterShot
{
	Default
	{
		translation "CMMDRLA_SplinterFire";
	}
}

class DRLAX_SplinterShotUnholy : DRLAX_SplinterShot
{
	Default
	{
		translation "CMMDRLA_SplinterUnholy";
	}
}

class DRLAX_TrespasserSmokeBombCooldown : Powerup
{
	Default
	{
		powerup.duration -60;
	}

	override void EndEffect()
	{
		if(owner && owner.health > 0)
		{
			owner.A_StartSound("trespasser/stealthready", slot:CHAN_6, volume:0.8);
		}
		Super.EndEffect();
	}
}

// In ACS
// 

//Str item = ScriptCall("DRLAX_DRPG_Functions", "GetTrespasserScans", playerno);

class DRLAX_DRPG_Functions
{
    static String GetTrespasserScans(int playerno)
    {
		if(players[playerno].mo)
		{
			let inv = DRLAX_TrespasserScanner(players[playerno].mo.FindInventory("DRLAX_TrespasserScanner"));
			if(inv)
			{
				return inv.armor.GetClassName();
			}
		}

        return "";
    }
}

class DRLAX_TrespasserScanner : DRLAX_BaseInventory
{
	Default
	{
		Inventory.Icon "TRESSCAN";
		inventory.maxamount 1;
		Inventory.InterhubAmount 1;
		inventory.pickupsound "";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up Trespasser's Scanner SOMEHOW?.";
		//species "Player";
		tag "Loot Tracker";
	}

	Class<Actor> armor;
	String armorname;
	Array<String> levels;

	override void PressedDrop()
	{
		
	}

	override void ConsumeItem()
	{

	}

	override void DropMessage()
	{
		owner.A_Print("This item cannot be dropped.");
	}

	override void UseMessage()
	{
		if(owner.CountInv("DRLAX_TrespasserScannerCooldown") > 0)
		{
			return;
		}

		owner.A_Print("Use the Tracker again to scan nearby items to have an increased chance of finding them inside crates.\n\cfCurrently tracking: \cv" .. armorname .. "\c-\n\nSwitch weapons to cancel scan.", 8.0);
		//owner.A_PlaySound("hud/generic");
	}

	override void UseSound()
	{
		if(owner.CountInv("DRLAX_TrespasserScannerCooldown") > 0)
		{
			return;
		}

		owner.A_StartSound("UI/PDA/UseCategory", flags:CHANF_LOCAL);
	}

	bool ValidItem(Actor i)
	{
		return (i is "RLGenericArmorPickup" || i is "RLGenericBootsPickup" || i is "RLStandardWeaponPickup" || 
		i is "RLExoticWeaponPickup" || i is "RLSuperiorWeaponPickup" || i is "RLUniqueWeaponPickup" || i is "RLDemonicWeaponPickup" ||
		i is "RLLegendaryWeaponPickup");
	}


	override void UseFunction()
	{
		if(owner.CountInv("DRLAX_TrespasserScannerCooldown") > 0)
		{
			return;
		}

		owner.A_Print("");

		BlockThingsIterator bti = BlockThingsIterator.Create(owner, 256);
        while(bti.Next())
        {
            CustomInventory i = CustomInventory(bti.Thing);

            if(i && ValidItem(i) && i.Distance3D(owner) <= 150 && i.CheckSight(owner))
            {
				if(i.GetTag().IndexOf("[O]",0) > 0)
				{
					continue;
				}

				armor = i.GetClass();
				armorname = i.GetTag();

				armorname.Replace(" [Pickup]", "");

				owner.GiveInventory("DRLAX_TrespasserScannerCooldown", 1);
				Spawn("DRLAX_TrespasserScannerScanning", i.pos);
				owner.A_Print("\c-Scan successful. Now tracking: \cv" .. armorname .. "\c-.", 8.0);
				owner.A_PlaySound("hud/assemblyconfirm");
		
                return;
            }
		}

		owner.A_Print("No valid items nearby.");
	}

	override void PostBeginPlay()
	{
		armorname = "Combat Armor";
		String s = "RLBlueArmorPickup";
		armor = s;
	}
}

Class DRLAX_TrespasserScannerCooldown : Powerup
{
	Default
	{
		powerup.duration -3;
	}
}

Class DRLAX_TrespasserScannerScanning : Actor
{
	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
	}

	states
	{
		Spawn:
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 
		{
			A_SpawnItemEx("DRLAX_TrespasserScannerFX", 16, 0, random(0, 40), 0, 0, 0, random(0, 360), SXF_NOCHECKPOSITION);
			A_SpawnItemEx("DRLAX_TrespasserScannerFX", 16, 0, random(0, 40), 0, 0, 0, random(0, 360), SXF_NOCHECKPOSITION);
		}
		stop;
	}
}

Class DRLAX_TrespasserScannerFX : Actor
{
	Default
	{
		+BRIGHT;
		height 2;
		radius 2;
		scale 0.5;
		+NOINTERACTION;
		+NOGRAVITY;
	}

	states
	{
		Spawn:
		TRSH D 0;
		TRSH E 1;
		loop;
	}

	override void Tick()
	{
		A_SetTics(random(1, 5));
		A_FadeOut(0.07);
		Super.Tick();
	}
}

Class DRLAX_TrespasserScatterShot : Inventory
{
	Default
    {
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
    }
}