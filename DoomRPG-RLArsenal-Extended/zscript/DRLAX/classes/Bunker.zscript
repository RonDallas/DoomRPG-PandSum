class RLBunkerStartingLoadout : CustomInventory
{
	states
	{
		Pickup:
        TNT1 A 0 A_TakeInventory("Clip", 60);
		TNT1 A 0 A_TakeInventory("RLPistol", 1);
		TNT1 A 0 A_GiveInventory("RLBlaster", 1);
		TNT1 A 0 A_GiveInventory("Cell", 200);
        TNT1 A 0 A_SelectWeapon("RLBlaster");
		TNT1 A 0 A_GiveInventory("DRLAX_BunkerShield", 1);
        TNT1 A 0 A_GiveInventory("DRLAX_BunkerRicochet", 1);
		stop;
	}
}


Class RLBunkerEvents : StaticEventHandler
{
    override void WorldThingSpawned(WorldEvent e)
    {
        if(e.Thing && e.Thing is "Rocket" && e.Thing.target && e.Thing.target.player)
        {
            DRLAX_BunkerRicochet r = DRLAX_BunkerRicochet(e.Thing.target.FindInventory("DRLAX_BunkerRicochet"));
            if(r && !r.off)
            {
                DLRAX_BunkerRocketHelper h = new ("DLRAX_BunkerRocketHelper");
                h.rocket = e.Thing;
                h.Init();
            }
        }
    }

    override void WorldThingDamaged (WorldEvent e) 
    {
        DRLAX_BunkerRicochet r = DRLAX_BunkerRicochet(players[consoleplayer].mo.FindInventory("DRLAX_BunkerRicochet"));

        if(r && !r.off && e.Thing && e.inflictor && e.damagesource)
        {
            if(e.inflictor is "Rocket" && e.DamageFlags & DMG_EXPLOSION)
            {
                e.Thing.DamageMobj(e.inflictor, e.damagesource, e.damage * 0.25, e.damagetype, DMG_THRUSTLESS|DMG_NO_PAIN);
            }
        }
    }

    override void RenderOverlay (RenderEvent event)
    {
        if(automapactive || !Cvar.GetCvar("drpg_drla_hud_on", players[consoleplayer]).GetBool())
        {
            return;
        }
        
        DRLAX_BunkerShield s = DRLAX_BunkerShield(players[consoleplayer].mo.FindInventory("DRLAX_BunkerShield"));

        if(s && players[consoleplayer].mo)
        {
            
            bool haschaingun;

            for(int i; i<DRLAX_BunkerShield.Chainguns.Size(); i++)
            {
                if(players[consoleplayer].ReadyWeapon is (DRLAX_BunkerShield.Chainguns[i]))
                {
                    haschaingun = true;
                    break;
                }
            }

            if(s.onyxgot[s.ONYX_DUELIST] && players[consoleplayer].ReadyWeapon is "RLPistolWeapon")
            {
                haschaingun = true;
            }

			int X = CVar.GetCVar("drpg_drla_x", players[consoleplayer]).GetInt();
			int Y = CVar.GetCVar("drpg_drla_y", players[consoleplayer]).GetInt();   
			int XOff = - 140, YOff = - 23;	

            if(Screen.GetAspectRatio() < 1.3)
            {
                XOff = - 279;
                YOff = + 5;
            }
            else if(Screen.GetAspectRatio() < 1.4)
            {
                XOff = - 248;
                YOff = - 23;
            }
            else if(Screen.GetAspectRatio() < 1.7)
            {
                XOff = - 183;
                YOff = - 23;
            }
            else if(Screen.GetAspectRatio() < 1.8)
            {
                XOff = - 140;
                YOff = - 23;
            }			
            else if(Screen.GetAspectRatio() > 2.3)
            {
                XOff = + 2;
                YOff = - 23;
            }

            let window_aspect    = 1.0 * Screen.GetWidth() / Screen.GetHeight();
            let resolution        = 480 * (window_aspect, 1);

            if(haschaingun)
            {
            Screen.DrawTexture(TexMan.CheckForTexture("BUNKRCEL", TexMan.Type_Sprite, 0), false, X + XOff + 2, Y + YOff,
            DTA_VIRTUALWIDTHF,    resolution.x,
            DTA_VIRTUALHEIGHTF,    resolution.y,
            DTA_KEEPRATIO, true, DTA_HUDRules);

            String cellammo = "" .. s.owner.CountInv("Cell");

            let cf = Font.CR_GOLD;

            if(players[consoleplayer].mo.CountInv("Cell") < 3)
            {
                cf = Font.CR_RED;
            }

            Screen.DrawText("CONFONT", cf, X + XOff + 20, Y + YOff, cellammo, 
            DTA_VIRTUALWIDTHF,    resolution.x,
            DTA_VIRTUALHEIGHTF,    resolution.y,
            DTA_KEEPRATIO, true, DTA_HUDRules);

                        
            TextureID shieldbar = TexMan.CheckForTexture("BUNKEN" .. Max(0, (s.shieldhealth / 64)), TexMan.Type_Sprite, 0);
            //Console.Printf("" .. Max(0, (s.shieldhealth / 64)));
            Screen.DrawTexture(shieldbar, false, X + XOff, Y + YOff + 15,
            DTA_VIRTUALWIDTHF,    resolution.x,
            DTA_VIRTUALHEIGHTF,    resolution.y,
            DTA_KEEPRATIO, true, DTA_HUDRules);

            if(players[consoleplayer].mo.CountInv("DRLAX_BunkerDamageNotification") > 0)
            {
                TextureID hurtbar = TexMan.CheckForTexture("BUNKENX", TexMan.Type_Sprite, 0);
                Screen.DrawTexture(hurtbar, false, X + XOff, Y + YOff + 15,
                DTA_VIRTUALWIDTHF,    resolution.x,
                DTA_VIRTUALHEIGHTF,    resolution.y,
                DTA_KEEPRATIO, true, DTA_HUDRules);
            }


            }            
        }
    }
}

Class DLRAX_BunkerRocketHelper : Thinker
{
    Actor rocket;
    bool inverse;

    override void Tick()
    {
        if(!rocket)
        {
            Destroy();
            return;
        }
        
        if(!rocket.bMISSILE)
        {
            rocket.bNOGRAVITY = true;
            rocket.bROLLSPRITE = false;
            rocket.bSPRITEANGLE = false;
            Destroy();
            return;
        }

        rocket.spriteangle += 4;
        if(inverse)
        {
            rocket.roll += 8;
        }
        else
        {
            rocket.roll -= 8;
        }
        Super.Tick();
    }

    void Init()
    {
        if(!rocket)
        {
            Destroy();
            return;
        }

        inverse = random(0, 1);

        rocket.A_SetSize(7, 7);

        rocket.bNOGRAVITY = false;
        rocket.A_ScaleVelocity(1.13);
        rocket.A_ChangeVelocity(rocket.vel.x, rocket.vel.y, rocket.vel.z + 2.5, CVF_REPLACE);
        rocket.A_SetGravity(0.4);
        rocket.bROLLSPRITE = true;
        rocket.roll = random(0, 360);
        rocket.bSPRITEANGLE = true;
        rocket.spriteangle = random(0, 360);
        rocket.bBOUNCEONCEILINGS = true;
        rocket.bBOUNCEONWALLS = true;
        rocket.bBOUNCEONFLOORS = true;
        rocket.bBOUNCEAUTOOFFFLOORONLY = true;
        rocket.wallbouncefactor = 0.5;
        rocket.bouncefactor = 0.6;
        rocket.bouncecount = 4;
        rocket.bouncesound = "weapons/grenadelauncherbounce";
    }
}
/*
class bunktest : DoomImp
{
    override void PostBeginPlay()
    {
        GiveInventory("DRLAX_BunkerShield", 1);
        GiveInventory("DRLAX_BunkerDummyShieldActive", 1);
    }
}*/

Class DRLAX_BunkerShield : Inventory
{
    DRLAX_BunkerShieldGfx shieldgfx;
    Array<DRLAX_BunkerShieldPart> parts;
    Array<Actor> damagers;
    const partcount = 55;
    int damagedue;
    Playerinfo p;

    const SHIELDMAXHP = 512;
    const SHIELDDAMAGEFACTOR = 1.14;


    /*static void NewTag(int playerno, string armor, string desc)
    {
        let a = players[playerno].mo.FindInventory(armor);
        if(a)
        {
            a.SetTag(a.GetTag() .. " - \cv" .. desc);
            String s = TexMan.GetName(a.icon);
            s.Replace("BOX", "BCY");
            a.icon = TexMan.CheckForTexture(s, TexMan.Type_Any, 0);
        }
    }*/


    
    override void PostBeginPlay()
    {
        Init();
    }

    override void Travelled()
    {
        Init();
    }

    void Init()
    {
        parts.Clear();

        for(int i; i<partcount; i++)
        {
            DRLAX_BunkerShieldPart p = DRLAX_BunkerShieldPart(Spawn("DRLAX_BunkerShieldPart"));
            p.owner = owner;
            p.shield = self;
            parts.Push(p);
        }

        shieldgfx = DRLAX_BunkerShieldGfx(Spawn("DRLAX_BunkerShieldGfx"));
        shieldgfx.owner = owner;
        shieldgfx.shield = self;

        shieldhealth = SHIELDMAXHP;
        shieldactive = 0;
        poweredtics = 0;
        activetics = 0;
    }

    int poweredtics;
    int activetics;
    int shieldhealth;
    int invultics;
    bool shieldactive;

    const ONYX_SECURITY = 0;
    const ONYX_COMBAT = 1;
    const ONYX_COMMANDO = 2;
    const ONYX_BALLISTIC = 3;
    const ONYX_BULLETPROOF = 4;
    const ONYX_CYBERWARRIOR = 5;
    const ONYX_DUELIST = 6;
    const ONYX_ENERGYSHIELD = 7;
    const ONYX_GOTHIC = 8;
    const ONYX_MEDICAL = 9;
    const ONYX_PHASESHIFT = 10;
    const ONYX_REPULSION = 11;
    const ONYX_SURVIVAL = 12;
    const ONYX_ONYX = 13;

    bool onyxgot[14];
    bool onyxnew[14];


    static const String Armoractors[] = 
    {
    "RLOModGreenArmor",
    "RLOModBlueArmor",
    "RLOModRedArmor",
    "RLOModBallisticVestArmor",
    "RLOModBulletProofVestArmor",
    "RLOModCyberwarriorArmor",
    "RLOModDuelistArmor",
    "RLOModEnergyShieldedVestArmor", 
    "RLOModGothicArmor",
    "RLOModMedicalArmor",
    "RLOModPhaseshiftArmor",
    "RLOModRepulsionWaveSuitArmor",
    "RLOModSurvivalMediArmor",
    "RLOnyxArmor"
    };


    static const String Armordesc[] = 
    {
        "YOUR SHIELD IS EXTRA RESISTANT TO BULLET ATTACKS.",
        "YOUR SHIELD IS EXTRA RESISTANT TO PLASMA ATTACKS.",
        "YOUR SHIELD IS EXTRA RESISTANT TO FIRE ATTACKS.",
        "YOUR SHIELD GRANTS YOU AMMO CHAIN (LESS AMMO USED FOR RAPID-FIRE WEAPONS).",
        "YOUR SHIELD ALSO PROTECTS YOU FROM BEHIND.",
        "YOUR SHIELD ALSO DAMAGES MONSTERS UP CLOSE.",
        "PISTOLS ALSO BRING UP YOUR SHIELD",
        "YOUR SHIELD CONSUMES LESS CELLS.",
        "YOUR SHIELD RETALIATES WITH PLASMA SPIKES WHEN HIT.",
        "GAIN BERSERK WHEN YOUR SHIELD BREAKS.",
        "NO SPEED PENALTY WHILE USING YOUR SHIELD.",
        "YOUR SHIELD KNOCKS AWAY MELEE ATTACKERS.",
        "YOUR SHIELD REGENERATES FASTER AFTER BREAKING.",
        "YOUR SHIELD IS 15% STRONGER."
    };

    void UpdateArmorflags()
    {
        for(int i = 0; i<Armordesc.Size(); i++)
        {
            let a = owner.FindInventory(Armoractors[i] .. "Pickup");
            let b = owner.FindInventory(Armoractors[i] .. "Token");
            onyxgot[i] = (a || b);

            if(onyxgot[i])
            {
                if(a && a.GetTag() == a.default.GetTag())
                {
                    a.SetTag(a.GetTag() .. " - \cv" .. Armordesc[i]);
                    String s = TexMan.GetName(a.icon);
                    s.Replace("BOX", "BCY");
                    a.icon = TexMan.CheckForTexture(s, TexMan.Type_Any, 0);
                }

                if(b && b.GetTag() == b.default.GetTag())
                {
                    b.SetTag(b.GetTag() .. " - \cv" .. Armordesc[i]);
                    String s = TexMan.GetName(b.icon);
                    s.Replace("BOX", "BCY");
                    b.icon = TexMan.CheckForTexture(s, TexMan.Type_Any, 0);
                }
            }
        }
        
        for(int i = 0; i<onyxgot.Size(); i++)
        {
            if(onyxgot[i])
            {
                if(!onyxnew[i])
                {
                    owner.ACS_NamedExecuteAlways("DRLA_BunkerShieldGet", 0, i);
                    owner.A_StartSound("weapons/masterassembly", CHAN_BODY, CHANF_LOCAL);
                    onyxnew[i] = true;
                }
            }
            else
            {
                onyxnew[i] = false;
            }
        }
    }

    override void Tick()
    {
        if(!owner)
        {
            Destroy();
            return;
        }

        if(!p)
        {
            p = owner.player;
            /*
            if(!p)
            {
                Destroy();
                return;
            }*/
        }

        if(GetAge() % 5 == 0)
        {
            UpdateArmorflags();
        }

        if(poweredtics > 4 && owner.health > 0)
        {
            if(poweredtics == 5 && !shieldactive)
            {
                //owner.A_TakeInventory("Cell", 2);
            }

            shieldactive = true;
            if(!onyxgot[ONYX_PHASESHIFT]){owner.GiveInventory("DRLAX_BunkerShieldSlower", 1);}
            owner.A_ChangeVelocity(owner.vel.x, owner.vel.y, Min(owner.vel.z, 0), CVF_REPLACE);
        }
        else
        {  
            shieldactive = false;
            owner.TakeInventory("DRLAX_BunkerShieldSlower", 1);
        }

        if(shieldactive)
        {
            if((activetics % (35 * 2)) == 0)
            {
                owner.A_TakeInventory("Cell", 3 - (onyxgot[ONYX_ENERGYSHIELD] * 2));
            }
            activetics++;

            if(onyxgot[ONYX_CYBERWARRIOR])
            {
                int yoffs = random(-64, 64);
                int zoffs = random(-64, 64);
                owner.A_SpawnItemEx ("DRLAX_BunkerSpark",cos(owner.pitch) * 52, yoffs,(-sin(owner.pitch) * 52) + zoffs,cos(owner.pitch)*0,0,-sin(owner.pitch)*0,0,SXF_NOCHECKPOSITION);
            }
        }
        else
        {
            activetics = 0;
        }

        if(onyxgot[ONYX_BALLISTIC] && poweredtics > 0)
        {
            owner.A_GiveInventory("RLAmmoChainPerk", 1);
        }
        else
        {
            owner.A_TakeInventory("RLAmmoChainPerk", 9999);
        }

        if(FiringChaingun(p) && shieldhealth > 0)
        {
            if(poweredtics != 0 && (CountInv(p.ReadyWeapon.AmmoType1) == 0 && p.ReadyWeapon.AmmoType1 != null))
            {
                //Console.Printf("No!");
            }
            else
            {
                if(owner.CountInv("Cell") >= 3)
                {
                    poweredtics++;
                }
                else
                {
                    if(poweredtics > 25)
                    {
                        poweredtics = 25;
                    }

                    poweredtics--;
                }
            }
        }
        else
        {
            if(poweredtics > 0)
            {
                if(FindChaingun(p, true))
                {
                    //Console.Printf("f");
                    if(owner.CountInv("Cell") < 5)
                    {
                        if(poweredtics > 25)
                        {
                            poweredtics = 25;
                        }

                        poweredtics--;
                    }
                    else
                    {
                        if(poweredtics > 12)
                        {
                            poweredtics = 12;
                        }

                        if(GetAge() % 9 == 0)
                        {
                            poweredtics--;
                        }
                    }
                }
                else
                {
                    if(poweredtics > 12)
                    {
                        poweredtics = 12;
                    }
                    poweredtics--;
                }
            }
        }

        if(owner.CountInv("DRLAX_BunkerDummyShieldActive") > 0 && shieldhealth > 0)
        {
            poweredtics = 5;
        }

        poweredtics = Max(0, poweredtics);

        //Console.Printf("" .. shieldhealth);

        DoDamage();
        
        for(int i; i<parts.Size(); i++)
        {
            if(parts[i])
            {
                Actor t = parts[i].owner;
                int dist = 48;
                int yoffs = ((-10 * 5) + (10 * (i % 11)));
                int zoffs = (t.height  * 0.10) + 10 * (i / 11);

                parts[i].Warp(t, cos(t.pitch) * dist, yoffs, (-sin(t.pitch) * dist) + zoffs, flags:WARPF_NOCHECKPOSITION);
                parts[i].A_Stop();
            }
        }

        if(shieldhealth < SHIELDMAXHP && GetAge() % 35 == 0 && owner.health > 0)
        {
            if(shieldactive)
            {
                shieldhealth += 4;
            }
            else
            {
                shieldhealth += 15;
            }

            shieldhealth = Min(shieldhealth, SHIELDMAXHP);

            if(shieldhealth == 0)
            {
                shieldhealth = 101;
            }
        }

        if(invultics > 0)
        {
            invultics--;
        }

        Super.Tick();
    }

    void DoDamage()
    {
        if(damagedue > 0)
        {
            //BreakFX();
            owner.GiveInventory("DRLAX_BunkerDamageNotification", 1);

            shieldhealth -= Clamp(damagedue, 3, 80);
            damagedue = 0; 

            if(shieldhealth <= 0)
            {
                // Shield death
                BreakFX();
                owner.A_StartSound("bunker/shieldbreak", slot:CHAN_6);
                shieldhealth = -300;
                poweredtics = 0;
                shieldactive = 0;
                activetics = 0;

                if(onyxgot[ONYX_SURVIVAL])
                {
                    shieldhealth = -120;
                }

                if(onyxgot[ONYX_MEDICAL])
                {
                    owner.GiveInventory("RLBerserk", 1);
                }
            }
            else
            {
                if(shieldhealth < 193)
                {
                    owner.A_StartSound("bunker/shieldwarning", slot:CHAN_7, flags:CHANF_NOSTOP);
                }
                invultics = 4;
            }
        }

        damagers.Clear();
    }

    static const String Chainguns[] = 
		{
		"RLChaingun", 
		"RLMinigun",
        "RLHighPowerChaingun",
        "RLHighPowerMinigun",
        "RLGatlingGun",
        "RLAssaultRifleChaingun",
        "RLAssaultRifleMinigun",
        "RLBurstCannonChaingun",
        "RLBurstCannonMinigun",
        "RLBulletstormChaingun",
        "RLLaserMinigun",
        "RLDemolitionAmmoChaingun",
        "RLDemolitionAmmoMinigun",
        "RLAutocannon",
        "RLNanoManufactureAmmoChaingun",
        "RLNanoManufactureAmmoMinigun"
		};

    bool FiringChaingun(Playerinfo p)
    {
        if(!p)
        {
            return false;
        }

        if((p.cmd.buttons & BT_ATTACK))
        {
            return(FindChaingun(p, true));
        }

        return false;
    }

    bool FindChaingun(Playerinfo p, bool allowpistols)
    {
        if(!p)
        {
            return true;
        }

        if(onyxgot[ONYX_DUELIST] && allowpistols && p.readyweapon is "RLPistolWeapon")
        {
        //Console.Printf("f");
            return true;
        }

        for(int i = 0; i<Chainguns.Size(); i++)
        {
            if(p.ReadyWeapon is (Chainguns[i]))
            {
                return true;
            }
        }
        return false;
    }

    override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
    {
        if(!passive && FindChaingun(owner.player, false) && flags & DMG_PLAYERATTACK)
        {
            if(source)
            {
                DRLAX_BunkerPlasmaAddDamage p = DRLAX_BunkerPlasmaAddDamage(Spawn("DRLAX_BunkerPlasmaAddDamage", owner.pos));
                if(p)
                {
                    p.target = owner;
                    p.tracer = source;
                    p.plsdamage = damage;
                }
            }
        }

        if(passive && damage > 0)
        {
            if(shieldactive && (flags & DMG_EXPLOSION))
            {
                if(AbsAngle(owner.angle, owner.AngleTo(inflictor)) <= 75)
                {
                    newdamage = 0;
                }
            }

            String s = damageType;
            s.ToLower();
            if(onyxgot[ONYX_REPULSION] && shieldactive && owner.CountInv("DRLAX_BunkerRepulseCooldown") == 0 && s == "melee")
            {
                owner.GiveInventory("DRLAX_BunkerRepulseCooldown", 1);
                owner.A_RadiusThrust(40000, 512, RTF_NOTMISSILE|RTF_NOIMPACTDAMAGE, 320);
                owner.A_PlaySound("misc/onyxgot[ONYX_REPULSION]wave", CHAN_WEAPON);
            }

            if(onyxgot[ONYX_BULLETPROOF] && shieldactive)
            {
                parts[random(0, partcount-1)].DamageMobj(inflictor, source, damage, damageType, flags);
                newdamage = 0;
            }
        }
    }

    void BreakFX()
    {
        for(int i; i<parts.Size(); i++)
        {
            Actor t = owner;
            int dist = 48;
            int yoffs = (-100 + (20 * (i % 11)));
            int zoffs = (t.height  * 0.10) + 20 * (i / 11);
            int spd = frandom(15, 25);
            //parts[i].Warp(t, cos(t.pitch) * dist, yoffs, (-sin(t.pitch) * dist) + zoffs, flags:WARPF_NOCHECKPOSITION);
            t.A_SpawnItemEx ("DRLAX_BunkerShieldBreak",cos(t.pitch) * dist, yoffs,(-sin(t.pitch) * dist) + zoffs,cos(t.pitch)*spd,0,-sin(t.pitch)*spd,0,SXF_NOCHECKPOSITION);
        }

        Actor a = Actor(Spawn("DRLAX_BunkerShieldGfxFlash", shieldgfx.pos));
        a.pitch = shieldgfx.pitch;
        a.angle = shieldgfx.angle;
    }
}

class DRLAX_BunkerPlasmaAddDamage : Actor
{
    Default
    {
        +NOINTERACTION;
        -SOLID;
    }

    int plsdamage;

    states
    {
        Spawn:
        TNT1 A 1;
        TTN1 A 0
        {
            if(tracer && target && tracer.health>0)
            {
                tracer.DamageMobj(self, target, plsdamage * 0.5, "Plasma", DMG_THRUSTLESS|DMG_NO_PAIN, 0);
            }
        }
        stop;
    }
}

class DRLAX_BunkerDummyShieldActive : Inventory
{

}

Class DRLAX_BunkerDamageNotification : Powerup
{
    Default
    {
        powerup.duration 12;
    }
}

Class DRLAX_BunkerShieldGfx : Actor
{
    Default
    {
        +FLATSPRITE;
        +NOINTERACTION;
        -SOLID;
        +NOGRAVITY;
        +BRIGHT;
        Height 1;
        Radius 1;
        renderstyle "Style_ADD";
        Alpha 0.5;
        xscale 0.4;
        yscale 0.0;
    }

    Actor owner;
    DRLAX_BunkerShield shield;

    states
    {
        Spawn:
        BUNS KJIHGFEDCB 2;
        loop;
    }

    override void Tick()
    {
        if(shield)
        {
            if(shield.shieldhealth < 193)
            {
                A_SetTranslation("CMMDRLA_ShieldRed");
            }
            else if(shield.shieldhealth < 321)
            {
                A_SetTranslation("CMMDRLA_ShieldAmber");
            }
            else
            {
                A_SetTranslation("");
            }

            if(scale.y < 0)
            {
                scale.y = 0;
            }

            if(shield.shieldactive)
            {
                if(PlayerPawn(owner))
                {
                PlayerPawn(owner).ViewBob = 0;
                }

                if(scale.y < 0.39)
                {
                    scale.y += 0.05;
                }


                if(shield.activetics == 1)
                {
                    A_StopSound(CHAN_5);
                    A_StartSound("bunker/shieldstart", CHAN_5);
                }
            }
            else
            {
                if(PlayerPawn(owner))
                {
                    PlayerPawn(owner).ViewBob = PlayerPawn(owner).Default.ViewBob;
                }

                if(scale.y > 0.04)
                {
                    scale.y -= 0.05;
                }

                if(scale.y == 0.35 && shield.shieldhealth > 0)
                {
                    A_StopSound(CHAN_5);
                    A_StartSound("bunker/shieldend", CHAN_5);
                }
            }

            if(shield.shieldhealth <= 0)
            {
                scale.y = 0;
            }

            if(owner)
            {
                Actor t = owner;
                int dist = 48;
                int yoffs = 0;
                int zoffs = owner.height * 0.8;//Round(owner.player.viewz - owner.z);
                Warp(t, cos(t.pitch) * dist, yoffs, ((-sin(t.pitch) * dist) + zoffs), flags:WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);

                float a = 1.0;

                a = a - ((255 - t.cursector.LightLevel) * 0.006);
                a = Clamp(a, 0.1, 0.5);

                A_SetRenderStyle(a, STYLE_ADD);

                pitch = 90 + owner.pitch;
            }
        }
        Super.Tick();
    }
}

Class DRLAX_BunkerShieldGfxFlash : DRLAX_BunkerShieldGfx
{
    Default
    {
        alpha 1.0;
        Renderstyle "Stencil";
        stencilcolor "White";
        xscale 0.4;
        yscale 0.4;
    }

    states
    {
        Spawn:
        TNT1 A 0;
        TNT1 A 0 A_Quake (6, 16, 0, 64, "");
        BUNS K 2;
        TNT1 A 12;
        stop;
    }

    override void Tick()
    {
        Actor.Tick();
    }
}

Class DRLAX_BunkerShieldPart : Actor
{
    Default
    {
        health 100;
        +BUDDHA;
        +NOGRAVITY;
        +SHOOTABLE;
        +NODAMAGETHRUST;
        +DONTRIP;
        +DONTBLAST;
        +NOTAUTOAIMED;
        +NOTARGET;
        +NOBLOOD;
        mass 99999;
        Height 15;
        Radius 8;
        alpha 0.0;
        renderstyle "Translucent";

        //species "Player";
        tag "Bunker Shield";
    }

    Actor owner;
    DRLAX_BunkerShield shield;

    states
    {
        Spawn:
        TNT1 A 1;
        loop;
    }

    bool AllyDamageSource(Actor source)
    {
        if(!owner.player)
        {
            return !(source.species == species);
        }

        return (!source.player && source.species != "Player" && !source.bFRIENDLY);
    }

    override int DamageMobj (Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
    {
        if(shield && shield.shieldactive && shield.invultics == 0)
        {
            if(!(flags & DMG_EXPLOSION))
            {
                Spawn("DRLAX_BunkerShieldHitFX", pos + (0,0,4));
            }

            if(source && AllyDamageSource(source))
            {
                if(flags & DMG_EXPLOSION)
                {
                    if(shield.damagers.Find(source) == shield.damagers.Size())
                    {
                        shield.damagers.Push(source);
                    }
                    else
                    {
                        return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
                    }
                }

                String m = mod;
                m.ToLower();

                if(shield.onyxgot[shield.ONYX_ONYX])
                {   
                    damage = damage * 0.85;
                }

                if(shield.onyxgot[shield.ONYX_SECURITY] && m == "bullet")
                {
                    damage = damage * 0.5;
                }

                if(shield.onyxgot[shield.ONYX_COMBAT] && m == "plasma")
                {
                    damage = damage * 0.5;
                }

                if(shield.onyxgot[shield.ONYX_COMMANDO] && m == "fire")
                {
                    damage = damage * 0.5;
                }

                shield.damagedue += damage * shield.SHIELDDAMAGEFACTOR;

                if(shield.onyxgot[shield.ONYX_GOTHIC])
                {
                    //SpawnMissile(shield.shieldgfx, "DRLAX_BunkerSpike", shield.owner);
                    let a = Spawn("DRLAX_BunkerSpike", pos);
                    a.target = shield.owner;
                    a.Vel3DFromAngle(50, shield.owner.angle, shield.owner.pitch);
                    a.pitch = shield.owner.pitch;
                    a.angle = shield.owner.angle;
                }

                return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
            }
        }


        return 0;
    }

    override void Tick()
    {
        if(owner)
        {
            species = owner.species;
        }
        if(shield && shield.shieldactive)
        {
            bSHOOTABLE = true;
            bINVISIBLE = false;

            if(shield.onyxgot[shield.ONYX_CYBERWARRIOR] && GetAge() % 5 == 0 && random(0, 11) == 0)
            {
                DRLAX_BunkerShieldAttack a = DRLAX_BunkerShieldAttack(Spawn("DRLAX_BunkerShieldAttack",pos));
                a.target = owner;
            }
        }  
        else
        {
            bSHOOTABLE = false;
            bINVISIBLE = true;
        }
        Super.Tick();
    }

    override bool CanCollideWith(Actor other, bool passive)
    {
        if(passive && other && other.bMISSILE && other.target && other.target.player)
        {
            return false;
        }   

        return Super.CanCollideWith(other, passive);
    }
}

Class DRLAX_BunkerRepulseCooldown : Powerup
{
    Default
    {
        powerup.duration 20;
    }
}

class DRLAX_BunkerShieldAttack : Actor
{
    Default
    {
        height 10;
        radius 8;
        +MISSILE;
        damagetype "Melee";
        +THRUSPECIES;
        +MTHRUSPECIES;
        species "Player";
        damage 1;
    }

    states
    {
        Spawn:
        TNT1 A 1;
        stop;
    }
}

Class DRLAX_BunkerShieldSlower : PowerSpeed
{
    Default
    {
        powerup.duration 3;
        speed 0.51;
    }
}

Class DRLAX_BunkerShieldHitFX : Actor
{
    Default
    {
        +NOINTERACTION;
        +NOGRAVITY;
        height 2;
        radius 2;
        translation "CMMDRLA_Shield";
        +BRIGHT;
        Alpha 0.8;
        renderstyle "Style_ADD";
    }

    states
    {
        Spawn:
        LSOK ABCDEF 2;
        TNT1 A 5;
        stop;
    }

    override void PostBeginPlay()
    {
        A_StartSound("bunker/shieldhit");
    }
}

class DRLAX_BunkerShieldBreak : Actor
{
    Default
    {
        +NOGRAVITY;
        +MISSILE;
        +BOUNCEONWALLS;
        +BOUNCEONFLOORS;
        +THRUACTORS;
        +BRIGHT;
        renderstyle "Add";
        alpha 0.5;
        height 2;
        radius 2;
        +FLATSPRITE;
        +ROLLSPRITE;
        scale 0.8;
    }

    uint fxtime;

    states
    {
        Spawn:
        TNT1 A 0;
        TNT1 A 0
        {
            fxtime = random(0, 25);
            frame = random(11, 18);
        }
        BUNS "#" -1;
        stop;
        Death:
        TNT1 A 1;
        stop;
    }

    override void Tick()
    {
        A_ScaleVelocity(0.96);
        if(GetAge() > 35 + fxtime)
        {
            A_FadeOut(0.1);
        }
        Super.Tick();
    }

    override void PostBeginPlay()
    {
        roll = random(0,360);
        angle = random(0,360);
        pitch = random(0,360);
    }
}

class DRLAX_BunkerSpark : Actor
{
    Default
    {
        +NOGRAVITY;
        +NOINTERACTION;
        +BRIGHT;
        -SOLID;
        height 2;
        radius 2;
        +FORCEXYBILLBOARD;
        scale 0.25;
        renderstyle "Add";
        alpha 0.8;
        translation "CMMDRLA_Shield";
    }

    states
    {
        Spawn:
        BUNS TUVWXYZ 1;
        stop;
    }
}

class DRLAX_BunkerSpike : Actor
{
    Default
    {
        +MISSILE;
        +NOGRAVITY;
        species "Player";
        +THRUSPECIES;
        +MTHRUSPECIES;
        height 8;
        radius 8;
        Damagetype "Piercing";
        damage 8;
        scale 0.5;
        renderstyle "Add";
        alpha 0.8;
        translation "CMMDRLA_Shield";
        +BRIGHT;
        speed 20;
    }

    states
    {
        Spawn:
        ZMIS A -1;
        stop;
    }
}

class DRLAX_BunkerRicochet : DRLAX_BaseInventory
{
	Default
	{
		Inventory.Icon "LAXITE6";
		inventory.maxamount 1;
		Inventory.InterhubAmount 1;
		inventory.pickupsound "";
		Inventory.UseSound "";
		Inventory.PickupMessage "You picked up Bunker's ricochet rockets, you thief!";
		//species "Player";
		tag "Ricochet Rockets \ck(Enabled)";
	}

    bool off;

	override void PressedDrop()
	{

	}

	override void ConsumeItem()
	{

	}

	override void DropMessage()
	{
		owner.A_Print("This item cannot be dropped.");
	}

	override void UseMessage()
	{
        if(!off)
        {
		    owner.A_Print("Ricochet Rockets are \ckenabled\c-. Press use again to toggle off. \c-\n\nSwitch weapons to cancel.", 8.0);
        }
        else
        {
            owner.A_Print("Ricochet Rockets are \cgdisabled\c-. Press use again to toggle on. \c-\n\nSwitch weapons to cancel.", 8.0);
        }

		owner.A_PlaySound("hud/generic");
	}

	override void UseSound()
	{
	}


	override void UseFunction()
	{
        if(off)
        {
            off = false;
		    owner.A_Print("Ricochet Rockets enabled.");
            SetTag("Ricochet Rockets \ck(Enabled)");
            icon = TexMan.CheckForTexture("LAXITE6", TexMan.Type_Any, 0);
            return;
        }
        else
        {
            off = true;
		    owner.A_Print("Ricochet Rockets disabled.");
            SetTag("Ricochet Rockets \cg(Enabled)");
            icon = TexMan.CheckForTexture("LAXITE7", TexMan.Type_Any, 0);
            return;
        }
	}

	override void PostBeginPlay()
	{

	}
}
