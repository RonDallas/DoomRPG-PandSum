#library "LEGNDLIB"

#include "zcommon.acs"

#define MAX_SKILLS                  8

str monsterChooser[MAX_SKILLS] =
{
    "LDLegendaryMonsterChooserEasy",
    "LDLegendaryMonsterChooserNormal",
    "LDLegendaryMonsterChooserHard",
    "LDLegendaryMonsterChooserUV",
    "LDLegendaryMonsterChooserNightmare",
    "LDLegendaryMonsterChooserNightmare", // DRLA Technophobia
    "LDLegendaryMonsterChooserNightmare", // DRLA Armageddon
    "LDLegendaryMonsterChooserNightmare" //  DRLA Adaptive
};

// --------------------------------------------------
// UTILITY FUNCTIONS
//

function void TossItem(str item)
{
	int x = GetActorX(0) + 4.0;
	int y = GetActorY(0) + 4.0;
	int z = GetActorZ(0) + 24.0;
	int angle = GetActorAngle(0);
	int tid = UniqueTID();
	int xspeed = FixedMul(cos(angle), 8.0);
	int yspeed = FixedMul(sin(angle), 8.0);

//	SpawnProjectile(0, item, 0, 0, 0, 0, tid);
	SpawnForced(item, x,y,z, tid, 0);
	SetActorVelocity(tid, xspeed, yspeed, -4.0, true, false);
	SetActorAngle(tid, angle);
    SetActorPosition(tid, x, y, z, 0);
	Thing_ChangeTID(tid, 0);
}

function void ClearHudMessage(int id)
{
    HudMessage(s:"\n"; HUDMSG_PLAIN, id, CR_WHITE, 0.0, 0.0, 0.0);
}

// --------------------------------------------------
// SCRIPTS
//

script "LDWorldInit" open
{
    Delay(1); // Give the world a chance to spawn
	if (ACS_NamedExecuteWithResult("SoDCheck") == 1) { delay(4); }

    int skill = GameSkill();
	
	Log(s:"LD_diemode");
	Log(i:GetCvar("LD_diemode"));

	if (GetCVar("DRLA_is_monsters_loaded") && skill == 7)
		skill = SKILL_HARD;

    if (skill > MAX_SKILLS - 1)
        skill = MAX_SKILLS - 1;

    // Assuming the radius of each chooser is 16384, the total reach is 32768 units each
    for (int x = -32768; x < 32768; x += 16384)
        for (int y = -32768; y < 32768; y += 16384)
            for (int z = -32768; z < 32768; z += 16384)
                SpawnForced(monsterChooser[skill], x << 16, y << 16, z << 16, 0, false);

    if (GetCVar("LD_legendarynightmare"))
    {
        Delay(35 * GetCVar("LD_legendarynightimer"));
        restart;
    }
}

script "LDMonsterInit" (void)
{
    int spawnHealth = GetActorProperty(0, APROP_SpawnHealth);
	int realSpawnHealth = spawnHealth;
    int tid = UniqueTID();
    bool evolved = false;

    if (CheckInventory("LDLegendaryMonsterToken") > 0)
        terminate;

    GiveInventory("LDLegendaryMonsterToken", 1);

    if (GetCVar("LD_legendarydebug"))
        Log(s:"\cdLD DEBUG\c-: \ca", s:GetActorClass(0), s:"\c- has been \cdLEGENDARIFIED\c-");

    if (!SpawnForced("DRPGLegenDoomActive", 0, 0, 0, tid, 0))
    {
        if (CheckFlag(0, "BOSS"))
            spawnHealth *= GetCVar("LD_legendaryhealthboss") / 100;
        else
            spawnHealth *= GetCVar("LD_legendaryhealth") / 100;

		// This requires Accensus' LD Lite/Hideous Destructor Patch in order to work.
		if (ACS_NamedExecuteWithResult("HideousDestructorLDLiteCheck",0,0,0,0))
            GiveInventory("HDLDLInit", spawnHealth);
			
        SetActorProperty(0, APROP_Health, spawnHealth);
    }
    else
    {
        Thing_Remove(tid);

        while (CheckInventory("DRPGLegenDoomMonsterInit") < 1)
            Delay(35);

        spawnHealth = GetActorProperty(0, APROP_Health);
    }

    while (true)
    {
        int health = GetActorProperty(0, APROP_Health);

        if (evolved)
        {
            GiveInventory("LDLegendaryMonsterVisualEffectMaker", 1);
        }
        else if (Health > 0 && health <= spawnHealth / 2)
        {
			// This requires Accensus' LD Lite/Hideous Destructor Patch in order to work.
			if (ACS_NamedExecuteWithResult("HideousDestructorLDLiteCheck",0,0,0,0))
				GiveInventory("HDLDLLegendarify", 1);
				
            SetActorProperty(0, APROP_Health, spawnHealth);

            if (CheckFlag(0, "BOSS"))
            {
                GiveInventory("LDLegendaryMonsterBossStatBoost", 1);
                SetActorProperty(0, APROP_DamageMultiplier, (GetCVar("LD_legendarydamageboss")));
            }
            else
            {
                GiveInventory("LDLegendaryMonsterStatBoost", 1);
                SetActorProperty(0, APROP_DamageMultiplier, (GetCVar("LD_legendarydamage")));
            }

            evolved = true;
        }

        if (health <= 0)
        {
            if (CheckFlag(0, "BOSS"))
            {
				     if (realSpawnHealth >= GetCVar("LD_bosshealthtier5"))  TossItem("LDLiteBossTier5Item");
				else if (realSpawnHealth >= GetCVar("LD_bosshealthtier4"))  TossItem("LDLiteBossTier4Item");
				else if (realSpawnHealth >= GetCVar("LD_bosshealthtier3"))  TossItem("LDLiteBossTier3Item");
				else if (realSpawnHealth >= GetCVar("LD_bosshealthtier2"))  TossItem("LDLiteBossTier2Item");
				else if (realSpawnHealth >= GetCVar("LD_bosshealthtier1"))  TossItem("LDLiteBossTier1Item");
				else                                                    	TossItem("LDLiteBossTier0Item");
				
                GiveInventory("LDLegendaryMonsterDed", 1);
            }
            else
            {
				     if (realSpawnHealth >= GetCVar("LD_healthtier5"))  TossItem("LDLiteTier5Item");
				else if (realSpawnHealth >= GetCVar("LD_healthtier4"))  TossItem("LDLiteTier4Item");
				else if (realSpawnHealth >= GetCVar("LD_healthtier3"))  TossItem("LDLiteTier3Item");
				else if (realSpawnHealth >= GetCVar("LD_healthtier2"))  TossItem("LDLiteTier2Item");
				else if (realSpawnHealth >= GetCVar("LD_healthtier1"))  TossItem("LDLiteTier1Item");
				else                                                    TossItem("LDLiteTier0Item");

                GiveInventory("LDLegendaryMonsterDed", 1);
            }
            terminate;
        }

        Delay(1);
    }
}

script "Draw_Pentagram" (int pentaradius, int r, int g, int b)
{
    int px, py, c_angle, count;
    int posx, posy, posz;
    int radius = pentaradius << 16;
    int angle;
    int offset = 0;

    int linepoints_x[5];
    int linepoints_y[5];
    int point1, point2;
    int linepos;
    int vec;

    int alpha = 1;
    bool fadeout = false;
    int color = (r << 16) | (g << 8) | b;

    posx = GetActorX(0);
    posy = GetActorY(0);
    posz = GetActorZ(0);

    while (true)
    {
        // Draw the circle, 360 points
        for (count = 360; count > 0; count--)
        {
            angle = 1.0 / 360 * count;
            px = posx + FixedMul(cos(angle), radius);
            py = posy + FixedMul(sin(angle), radius);

            SpawnParticle(color, true, Random(1, 3), Random(5, 7), px, py, posz, 0, 0, 0, 0, 0, 0, alpha, 255);
        }

        // Draw each line, 5 points
        // First build the point positions
        for (count = 5; count > 0; count--)
        {
            angle = 1.0 / 5 * count;
            linepoints_x[count - 1] = posx + FixedMul(cos(angle), radius);
            linepoints_y[count - 1] = posy + FixedMul(sin(angle), radius);
        }

        // Now draw 5 line vectors, skipping every second number to draw the star
        point1 = 0;
        point2 = 2; // (point1 + 2) % 5
        for (count = 0; count < 5; count++)
        {
            for (linepos = FixedMul(radius, 1.9) >> 16; linepos > 0; linepos--)
            {
                vec = VectorAngle(linepoints_x[point2] - linepoints_x[point1], linepoints_y[point2] - linepoints_y[point1]);
                px = linepoints_x[point1] + linepos * Cos(vec);
                py = linepoints_y[point1] + linepos * Sin(vec);

                SpawnParticle(color, true, Random(1, 3), Random(5, 7), px, py, posz, 0, 0, 0, 0, 0, 0, alpha, 255);
            }

            point1 = point2;
            point2 = (point1 + 2) % 5;
        }

        if (!fadeout)
        {
            alpha += 20;

            if (alpha > 255)
            {
                alpha = 255;
                fadeout = true;
            }
        }
        else
        {
            alpha -= 2;

            if (alpha < 2)
                terminate;
        }

        Delay(1);
    }
}

// --------------------------------------------------
// COMPAT CHECKERS
//

// DRLA Arsenal Check
int isDRLA = 2;
script "DRLALDLiteCheck" (void)
{
    if (isDRLA == 2)
    {
        int TID = UniqueTID();
        int spawned = SpawnForced("RLArsenalThingo", 0, 0, 0, TID, 0);

        if (spawned)
        {
            Thing_Remove(TID);
            isDRLA = true;
        }
        else
            isDRLA = false;
    }

    SetResultValue(isDRLA);
}

// Shades of Doom check
int isSoD = 2;
script "SoDCheck" (void)
{
    if (isSoD == 2)
    {
        int TID = UniqueTID();
        int spawned = SpawnForced("DeadCyanZombieman2", 0, 0, 0, TID, 0);

        if (spawned)
        {
            Thing_Remove(TID);
            isSoD = true;
        }
        else
            isSoD = false;
    }

    SetResultValue(isSoD);
}

// Guncaster check
int IsThePillowCompletelyBlasted = 2;
script "GuncasterLDLiteCheck" (void)
{
	if(IsThePillowCompletelyBlasted == 2)
	{
		int TID = UniqueTID();
		if (SpawnForced("GnuCustard", 0, 0, 0, TID, 0))
		{
			Thing_Remove(TID);
			IsThePillowCompletelyBlasted = true;
		}
		else
			IsThePillowCompletelyBlasted = false;
	}
	SetResultValue(IsThePillowCompletelyBlasted);
}

// Hideous Destructor check
int IsHDDetected = 2;
script "HideousDestructorLDLiteCheck" (void)
{
	if(IsHDDetected == 2)
	{
		int TID = UniqueTID();
		if (SpawnForced("HDDebris", 0, 0, 0, TID, 0))
		{
			Thing_Remove(TID);
			IsHDDetected = true;
		}
		else
			IsHDDetected = false;
	}
	SetResultValue(IsHDDetected);
}

// --------------------------------------------------
// HD STUFF
//

script "LDLite_HDCurser" (int cursedelay)
{
	int x = GetActorX(0) + 4.0;
	int y = GetActorY(0) + 4.0;
	int z = GetActorZ(0) + 24.0;
	int angle = GetActorAngle(0);
	int tid = UniqueTID();
	SpawnForced("NecroGhost", x, y, z, tid, 0);
	Delay (35 * random(cursedelay,cursedelay+4));
	SetActorState(tid, "birth", 0);
}
// --------------------------------------------------
// DECORATE HELPERS
//

script "PlayerCount" (void)
{
	SetResultValue(PlayerCount());
}

// --------------------------------------------------
// CVAR GETTERS
//

script "LD_LegendaryHealth" (void)
{
    SetResultValue(GetCVar("LD_legendaryhealth"));
}

script "LD_LegendaryHealthBoss" (void)
{
    SetResultValue(GetCVar("LD_legendaryhealthboss"));
}

script "LD_LegendaryChance" (void)
{
    SetResultValue(GetCVar("LD_legendarychance"));
}

script "LD_FriendlyLegendaries" (void)
{
    SetResultValue(GetCVar("LD_friendlylegendaries"));
}

script "LD_LegendaryNightmare" (void)
{
    SetResultValue(GetCVar("LD_legendarynightmare"));
}

script "LD_DieMode" (void)
{
    SetResultValue(GetCVar("LD_diemode"));
}

script "LD_NoMonsters" (void)
{
    SetResultValue(GetCVar("LD_nomonsters"));
}

script "LD_NoBosses" (void)
{
    SetResultValue(GetCVar("LD_nobosses"));
}

script "LD_DropType" (void)
{
    SetResultValue(GetCVar("LD_droptype"));
}

script "LD_MonsterCheck" (void)
{
    SetResultValue(GetCVar("LD_monstercheck"));
}

script "LD_LegendaryMarkers" (void)
{
    SetResultValue(GetCVar("LD_legendarymarkers"));
}

script "LD_LegendaryDebug" (void)
{
    SetResultValue(GetCVar("LD_legendarydebug"));
}
