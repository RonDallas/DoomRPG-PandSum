Mixin Class PandIncreaseGameLevel
{
  action void A_IncreaseGameLevel(int level = 1)
	{
	let g = PandGlobalVariables.Get();
	if(g)
		{
		g.GameLevel += level;

		for(int i = 0; i<Players.Size(); i++)
			{
			if(!Players[i].mo)
				continue;
			Players[i].mo.GiveInventory("PMGameLevel", level);
			}
		}
	}
	
/*  action void A_IncreaseGameLevelMonstersOnly(int level = 1)
	{
	let g = PandGlobalVariables.Get();
	if(g && g.MonstersOnly)
		{
		self.Destroy();
		A_IncreaseGameLevel(level);
		}
	}*/
}

Mixin Class PandBetterPickupSound
{
  override void PlayPickupSound(actor toucher)
	{
	let handler = Pand_TestHandler(EventHandler.Find("Pand_TestHandler"));
	if(handler)
		{
		if ( handler.lastpickuptic[toucher.PlayerNumber()] == gametic )
		return;
		handler.lastpickuptic[toucher.PlayerNumber()] = gametic;
		}
	double atten;
	int flags = CHANF_OVERLAP|CHANF_MAYBE_LOCAL;
	if ( bNoAttenPickupSound ) atten = ATTN_NONE;
	else atten = ATTN_NORM;
	if ( toucher && toucher.CheckLocalView() )
	flags |= CHANF_NOPAUSE;
	toucher.A_StartSound(PickupSound,CHAN_ITEM,flags,1.0,atten);
	}
}

Class PandFX : Actor
{

}

Class PandInventory : Inventory
{
  Mixin PandIncreaseGameLevel;
  Mixin PandBetterPickupSound;
}

Class PandCustomInventory : CustomInventory //temporary
{
  Mixin PandIncreaseGameLevel;
  Mixin PandBetterPickupSound;
}

Class PandAmmo : Ammo //temporary
{
  Mixin PandBetterPickupSound;
}

Class PandProjectile : Actor
{
  Default
  {
  Projectile;
  PandProjectile.FireSound "";
  PandProjectile.ParticleColors "000000", "000000", "FFFFFF", "FFFFFF";
  }
  
  int user_fx;
  int user_pcolor;
  array <color> ParticleColor;
  
  color pcolor1;
  color pcolor2;
  color pcolor3;
  color pcolor4;
  property ParticleColors: pcolor1, pcolor2, pcolor3, pcolor4;
  
  sound projfiresound;
  property FireSound: projfiresound;
  sound projfiresound2;
  property FireSound2: projfiresound2;
  
  virtual color GetParticleColor()
	{
	return ParticleColor[random(0,ParticleColor.Size()-1)];
	}
	
  override void BeginPlay()
	{
	Super.BeginPlay();
	ParticleColor.Push(pcolor1);
	ParticleColor.Push(pcolor2);
	ParticleColor.Push(pcolor3);
	ParticleColor.Push(pcolor4);
	}
	
  override void PostBeginPlay()
	{
	if(target)
		{
		target.A_StartSound(projfiresound2,10);
		target.A_StartSound(projfiresound,1,CHANF_OVERLAP);
		}
	else
		{
		A_StartSound(projfiresound2,10);
		A_StartSound(projfiresound,1,CHANF_OVERLAP);
		}
	Super.PostBeginPlay();
	}
}

Class PandFastProjectile : FastProjectile
{
  Default
  {
  PandFastProjectile.FireSound "";
  PandFastProjectile.ParticleColors "000000", "000000", "FFFFFF", "FFFFFF";
  }
  
  int user_fx;
  int user_pcolor;
  array <color> ParticleColor;
  
  color pcolor1;
  color pcolor2;
  color pcolor3;
  color pcolor4;
  property ParticleColors: pcolor1, pcolor2, pcolor3, pcolor4;
  
  sound projfiresound;
  property FireSound: projfiresound;	//this one overlaps
  sound projfiresound2;
  property FireSound2: projfiresound2;	//this one doesn't
  
  virtual color GetParticleColor()
	{
	return ParticleColor[random(0,ParticleColor.Size()-1)];
	}
	
  override void BeginPlay()
	{
	Super.BeginPlay();
	ParticleColor.Push(pcolor1);
	ParticleColor.Push(pcolor2);
	ParticleColor.Push(pcolor3);
	ParticleColor.Push(pcolor4);
	}
	
  override void PostBeginPlay()
	{
	if(target)
		{
		target.A_StartSound(projfiresound2,10);
		target.A_StartSound(projfiresound,1,CHANF_OVERLAP);
		}
	else
		{
		A_StartSound(projfiresound2,10);
		A_StartSound(projfiresound,1,CHANF_OVERLAP);
		}
	Super.PostBeginPlay();
	}
}

Class PandParticle : PandFX
{
  Default
  {
  PandParticle.ParticleColors "000000", "000000", "FFFFFF", "FFFFFF";
  Renderstyle "Add";
  +NOINTERACTION;
  +BRIGHT;
  +FORCEXYBILLBOARD;
  +ROLLSPRITE;
  }
  
  int user_fx;
  int user_pcolor;
  array <color> ParticleColor;
  
  color pcolor1;
  color pcolor2;
  color pcolor3;
  color pcolor4;
  property ParticleColors: pcolor1, pcolor2, pcolor3, pcolor4;
  
  virtual color GetParticleColor()
	{
	return ParticleColor[random(0,ParticleColor.Size()-1)];
	}
	
  override void BeginPlay()
	{
	Super.BeginPlay();
	ParticleColor.Push(pcolor1);
	ParticleColor.Push(pcolor2);
	ParticleColor.Push(pcolor3);
	ParticleColor.Push(pcolor4);
	}
}

Class PandRandomSpawner : RandomSpawner
{
  static int GetGameLevel(int Level)
	{
	let g = PandGlobalVariables.Get();
	if(!pan_progressivespawn)
		return 256;
	return g.GameLevel;
	}

  override Name ChooseSpawn()
	{
	DropItem di;   // di will be our drop item list iterator
	DropItem drop; // while drop stays as the reference point.
	int n = 0;
	bool nomonsters = sv_nomonsters || level.nomonsters;
			

	drop = di = GetDropItems();
	if(di != null)
		{
		while(di != null)
			{
			bool shouldSkip = (di.Name == 'None') || (nomonsters && IsMonster(di));
			
			if (!shouldSkip)
				{
				int amt = di.Amount;
				if(amt < 0) amt = 1; // default value is -1, we need a positive value.
				n += amt; // this is how we can weight the list.
				}

			di = di.Next;
			}
			
			if (n == 0)
				{ // Nothing left to spawn. They must have all been monsters, and monsters are disabled.
				return 'None';
				}
				
			// Then we reset the iterator to the start position...
			di = drop;
			
			// Take a random number...
			n = random[randomspawn](0, n-1);
			
			// And iterate in the array up to the random number chosen.
			while (n > -1 && di != null)
			{
			let prob = di.Probability;
			let level = prob * pan_progressionslider * CVar.GetCVar("drpg_ws_use_wads").GetInt();
			
			if (di.Name != 'None' && (!nomonsters || !IsMonster(di)) && (level <= GetGameLevel(1)))
				{
				int amt = di.Amount;
				if (amt < 0) amt = 1;
				n -= amt;
				if ((di.Next != null) && (n > -1))
					di = di.Next;
				else
					n = -1;
				}
			else
				{
				di = di.Next;
				}
			}
			
		if (di == null)
			{
			return 'Unknown';
			}
		
		else if (random[randomspawn]() <= 255)	//lmao this is the stupidest shit I've ever done
			{
			return di.Name;
			}
		
		else
			{
			return 'None';
			}
		}
	else
		{
		return 'None';
		}
	}
}

Class PandMonster : Actor
{
  Default
  {
  Monster;
  +FLOORCLIP;
  TeleFogSourceType "EnemyTeleportFog";
  TeleFogDestType "EnemyTeleportFog";
  PandMonster.Species2 "None";
  PandMonster.TagColor "j"; //white
  Tag "Default Monster Name";
  }

  string spec2;
  property Species2: spec2;

  string tagcol;
  property TagColor: tagcol;

  int attackloop;
  int reload;

  void A_ChangePainChance(int pchance)
	{
	painchance = pchance;
	}
	
  int GetGameLevel()
    {
	let g = PandGlobalVariables.Get();
	let glevel = g.GameLevel;
	if(g)
		return glevel;
	else
		return 0;
	}
	
  void A_RevertMusic()
	{
	S_ChangeMusic("*");
	}

  void A_PandGib()
	{
	A_SpawnItemEx("GibGenerator",0,0,0,vel.x,vel.y,vel.z,0,SXF_USEBLOODCOLOR|SXF_ABSOLUTEVELOCITY);
	}

  void A_PandGibSubtract()
	{
	A_SpawnItemEx("SubtractGibGenerator",0,0,0,vel.x,vel.y,vel.z,0,SXF_USEBLOODCOLOR|SXF_ABSOLUTEVELOCITY);
	}

  void A_PandSmallGib()
	{
	A_SpawnItemEx("SmallGibGenerator",0,0,0,vel.x,vel.y,vel.z,0,SXF_USEBLOODCOLOR|SXF_ABSOLUTEVELOCITY);
	}

  void A_PandBossGib()
	{
	A_SpawnItemEx("BossGibGenerator",0,0,0,vel.x,vel.y,vel.z,0,SXF_USEBLOODCOLOR|SXF_ABSOLUTEVELOCITY);
	}

  void A_Dash(double speed, double angle)
	{
	Thrust(speed,angle);
	}

  void A_BeginFloat()
	{
	A_NoGravity(); //these are only here to prevent certain Boom/ZDoom map things from breaking with flying enemies, Sunlust map07 for example
	bFLOAT = true;
	bFLOORCLIP = false;
	}

  override void PostBeginPlay()
	{
	Super.PostBeginPlay();
	if(pan_coloredtags)
		PandMonsterTag(GetTag());
	}

  virtual void PandMonsterTag(name montag)
	{
  	let coloredtag = "\c"..tagcol..montag.."\c-";
	SetTag(coloredtag);
	}

  action actor A_LobProjectile(class<Actor> MissileType, double SpawnHeight = 32, double SpawnOfs_XY = 0, double Angle = 0, int Flags = 0, double Pitch = 0, int Ptr = AAPTR_TARGET)
	{
	actor proj = A_SpawnProjectile(MissileType,SpawnHeight,SpawnOfs_XY,Angle,Flags,Pitch,Ptr);
	actor other = GetPointer(Ptr);
	if(proj)
		{
		if(other)
			{
			int ZDiff = int(other.Pos.Z + other.Height / 2 - Pos.Z - SpawnHeight);
			proj.Vel.Z += (ZDiff + Distance2D(other)) / TICRATE * proj.GetGravity() / 2;
			}
		return proj;
		}
	return null;
	}

  action actor A_InterceptProjectile(class<Actor> MissileType, double SpawnHeight = 32, double SpawnOfs_XY = 0, double Angle = 0, int Flags = 0, double Pitch = 0, int Ptr = AAPTR_TARGET)
	{
	actor proj = A_SpawnProjectile(MissileType,SpawnHeight,SpawnOfs_XY,Angle,Flags,Pitch,Ptr);
	actor other = GetPointer(Ptr);
	if(proj)
		{
		if(other)
			{
			proj.VelIntercept(other);
			}
		return proj;
		}
	return null;
	}

  override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
	if(source && source.bISMONSTER == true && source is "PandMonster")
		{
		let source2 = PandMonster(source);
		if(source.bDONTHARMSPECIES == true && spec2 != "None" && spec2 == source2.spec2)
			return 0;
		}
	return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	}
}

Mixin Class ChaosEnemy
{
  Default
  {
  PandMonster.Species2 "Chaos";
  PandMonster.TagColor "[j5]";
  }

  override bool CanCollideWith(Actor other, bool passive)
	{
	let g = PandGlobalVariables.Get();
	string otherspec = "None";
	if(other is "PandMonster")
		otherspec = PandMonster(other).spec2;
	if(g && g.SpawnEventActive == 6 && otherspec == "Chaos") return false;
	if(other.master && other.master is "ChaosMonolith") return false;
	if(other.target && other.target.master && other.bNOBLOCKMAP == true && other.target.master is "ChaosMonolith" && other.target.Species == "Chaos") return false;
	else return Super.CanCollideWith(other,passive);
	}

  void ChaosDie()
	{
	if(master && master is "ChaosMonolith")
		master.TakeInventory("MonolithSpawnCount",1);
	}
}