class Pand_ReplacerHandler : EventHandler
{
  override void CheckReplacement(ReplaceEvent a)
	{
	let g = PandGlobalVariables.Get();
	//Blood and gibs
	if(pan_blood) 
		{	
		switch(a.Replacee.GetClassName()) 
			{
			case 'Blood' 		: a.Replacement = 'PandBlood'; break;
			case 'BloodSplatter': a.Replacement = 'PandBlood'; break;
			}
		}
	else
		{
		switch(a.Replacee.GetClassName()) 
			{
			case 'PandBloodSubtract' 	: a.Replacement = 'Blood'; break;
			case 'GibGenerator' 		: a.Replacement = 'Nothing'; break;
			case 'SmallGibGenerator' 	: a.Replacement = 'Nothing'; break;
			case 'BossGibGenerator' 	: a.Replacement = 'Nothing'; break;
			case 'SubtractGibGenerator' : a.Replacement = 'Nothing'; break;
			}
		}
		
	//Monster presets
	switch(a.Replacee.GetClassName()) 
		{
		case 'WolfensteinSS'	:
			if(pan_monsterpatch == 1)
				{ a.Replacement = 'PhaseImp'; break; }
			else if(pan_monsterpatch == 2)
				{ a.Replacement = 'Scythe2Marine'; break; }
			else if(pan_monsterpatch == 3)
				{ a.Replacement = 'Epic2Alien'; break; }
		case 'CommanderKeen'	:
			if(pan_monsterpatch == 1)
				{ a.Replacement = 'Sayori'; break; }
			else if(pan_monsterpatch == 2)
				{ a.Replacement = 'Scythe2Afrit'; break; }
			else if(pan_monsterpatch == 3)
				{ a.Replacement = 'Epic2Keen'; break; }
		}
		
	//Name "fixes"
	switch(a.Replacee.GetClassName())
		{
		case 'Mauler'	: a.Replacement = 'PandMauler'; break;
		case 'Sentinel'	: a.Replacement = 'PandSentinel'; break;
		case 'Wraith'	: a.Replacement = 'PandWraith'; break;
		}
		
	//Zombie Progression Spawning stuff
	switch(a.Replacee.GetClassName())
		{
		case 'ZombiemanSpawnS'		:
			if(pan_progressivespawn)
				{ a.Replacement = 'ZombiemanSpawnS2'; break; }
			else
				{ a.Replacement = 'PistolZombie'; break; }
		case 'ShotgunguySpawnS'		:
			if(pan_progressivespawn)
				{ a.Replacement = 'ShotgunguySpawnS2'; break; }
			else
				{ a.Replacement = 'NewShotgunGuy'; break; }
		case 'ChaingunguySpawnS'		:
			if(pan_progressivespawn)
				{ a.Replacement = 'ChaingunguySpawnS2'; break; }
			else
				{ a.Replacement = 'AssaultGunner'; break; }
		}
	}
}

class Pand_EffectChoker : EventHandler
{
  override void WorldThingSpawned(WorldEvent e)
	{
	if(pan_effectchoker && e.thing && e.thing is "PandFX")
		e.thing.Destroy();
	}
	
  override void NetworkProcess(ConsoleEvent e)
    {
	if(e.name != "Pand_ClearEffects" || !e.isManual)
		return;
	if(e.player != net_arbitrator)
        {
		if(e.player == consoleplayer)
		Console.Printf("Only the host can activate effect choker!");
		return;
        }        
	if(!pan_effectchoker)
		{
		CVar.GetCVar("pan_effectchoker").setint(1);
		Console.Printf("Effect Choker Enabled");
		}
	else
		{
		CVar.GetCVar("pan_effectchoker").setint(0);
		Console.Printf("Effect Choker Disabled");
		}
    }
}

class Pand_MonsterCounterHandler : EventHandler
{
  override void WorldThingSpawned(WorldEvent e)
	{
	bool counts = (e.thing && e.thing.bCountKill);
	if(!pan_lostsoulcount && counts && e.thing is "NewLostSoul")
		{
		e.thing.bCountKill = false;
		Level.total_monsters--;
		}
	}
	
  override void WorldThingRevived(WorldEvent e)
	{
	if(e.thing && e.thing.bCountKill)
		{
		e.thing.bCountKill = false;
		Level.total_monsters--;
		}
	}
}

class Pand_TestHandler : EventHandler
{
  transient int lastpickuptic[MAXPLAYERS];
  actor bossspawner;

  static const name SpawnEvent[] = //name the event's randomspawner after these
	{
	"DarkEvent",
	"CyberEvent",
	"AbyssalEvent",
	"HardEvent",
	"HellfireEvent",
	"ChaosEvent"
	};

  static const name SpawnEventName[] = //this is what actually displays on screen
	{
	"\cdDark Forces",
	"\c[i6]Cybernetics",
	"\c[u5]Abyssal Invasion",
	"\c[d4]Hard Mode",
	"\c[z4]Hellfire",
	"\c[j5]Chaotic Microcosm"
	};
  
  override void WorldUnloaded(WorldEvent e)
	{
	let g = PandGlobalVariables.Get();
	if(g)
		{
		//g.GameLevel++;
		//g.GameLevel += 4;
		if(Level.MapName != "OUTPOST")
			g.GameLevel += 4;
		if(g.GameLevel > 40 * CVar.GetCVar("drpg_ws_use_wads").GetInt() && random(1,6) == 1)
			g.SpawnEventActive = random(1,(SpawnEvent.Size()));
		else if(g.SpawnEventActive > 0)
			g.SpawnEventActive = 0;
		}
	}

  override void WorldLoaded(WorldEvent e)
	{
	let g = PandGlobalVariables.Get();

	if(Level.MapName == "OUTPOST" && g.GameLevel >= 4)
		g.GameLevel -= 4;

	if(g.GameLevel < (CVar.GetCVar("drpg_monster_mapweight").GetInt() - 1) * 4)
		g.GameLevel = (CVar.GetCVar("drpg_monster_mapweight").GetInt() - 1) * 4;

	for(int i = 0; i<Players.Size(); i++)
		{
		if(!Players[i].mo)
			continue;
		Players[i].mo.SetInventory("PMGameLevel", g.GameLevel);
		}

	if(g && Level.MapName != "OUTPOST")
		{
		let ActiveEvent = g.SpawnEventActive;
		if(ActiveEvent > 0)
			{
			string sevent = Pand_TestHandler.SpawnEventName[ActiveEvent-1];
			S_StartSound("SpawnEvent",10,CHANF_UI|CHANF_NOPAUSE,1.0);
			notHudMessageHandler.PlainMsg("PANDFNT1","Spawn Event Activated",(160,30),(320,200),time:(1,3,1));
			notHudMessageHandler.PlainMsg("PANDFNT2",sevent,(160,45),(320,200),time:(1,3,1));
			}
		if(pan_pursuerbosses)
			{
			if(g.PickedBoss > 0)
				{
				if(pan_debugmsg)
					Console.Printf("It's boss time!");
				bossspawner = Actor.Spawn("PandPursuerBossSpawnerRPG",(0,0,0));
				bossspawner.target = players[0].mo;
				}
			else if(g.GameLevel >= 25 * CVar.GetCVar("drpg_ws_use_wads").GetInt() && g.PickedBoss == 0)
				{
				g.BossChance += 10;
				if(random(0,100) <= g.BossChance)
					{
					g.BossChance = 0;
					g.PickedBoss = random(1,2);
					if(g.GameLevel < 60 * CVar.GetCVar("drpg_ws_use_wads").GetInt() && g.PickedBoss == 2)
						{
						g.PickedBoss = 1;
						}
					if(pan_debugmsg)
						Console.Printf("It's boss time!");
					bossspawner = Actor.Spawn("PandPursuerBossSpawnerRPG",(0,0,0));
					bossspawner.target = players[0].mo;
					}
				}
			else
				{
				g.PickedBoss = 0;
				}
			}
		}
	}
	
  override void WorldThingDied(WorldEvent e)
	{
	if(e.Thing.bISMONSTER && e.Thing.bBOSS)
		{
		let g = PandGlobalVariables.Get();
		if(g && g.PickedBoss == 2)
			{
			let myrkura = Actor.Spawn("MyrkuraSpawnerRPG");
			myrkura.Warp(e.Thing);
			g.PickedBoss = 0;
			}
		}
	}
	
  override void NetworkProcess(ConsoleEvent e)
    {
	if(e.name == "Pand_GameLevel")
		{
		let g = PandGlobalVariables.Get();
		Console.Printf("Game level: \cd%d", g.GameLevel);
		}
    }
}

class PMGameLevel : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.UNCLEARABLE;
		inventory.maxamount 4000;
	}
}